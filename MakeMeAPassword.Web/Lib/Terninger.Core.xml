<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Terninger.Core</name>
    </assembly>
    <members>
        <member name="T:MurrayGrant.Terninger.Accumulator.EntropyAccumulator">
            <summary>
            Entropy Accumulator as defined in section 9.5.
            Consists of a number of EntropyPool objects, and methods to add entropy and derive new seed material.
            </summary>
        </member>
        <member name="P:MurrayGrant.Terninger.Accumulator.EntropyAccumulator.TotalEntropyBytes">
            <summary>
            The total entropy accumulated over the entire life of this instance.
            </summary>
        </member>
        <member name="P:MurrayGrant.Terninger.Accumulator.EntropyAccumulator.AvailableEntropyBytesSinceLastSeed">
            <summary>
            The total available entropy since last seed event.
            As it is rare for all pools to be used for a reseed, this rarely reaches zero.
            </summary>
        </member>
        <member name="P:MurrayGrant.Terninger.Accumulator.EntropyAccumulator.PoolZeroEntropyBytesSinceLastSeed">
            <summary>
            The amount of entropy accumulated in pool zero, since last reseed.
            </summary>
        </member>
        <member name="P:MurrayGrant.Terninger.Accumulator.EntropyAccumulator.MaxPoolEntropyBytesSinceLastSeed">
            <summary>
            The maximum amount of entropy accumulated in any one pool.
            </summary>
        </member>
        <member name="P:MurrayGrant.Terninger.Accumulator.EntropyAccumulator.MinPoolEntropyBytesSinceLastSeed">
            <summary>
            The minimum amount of entropy accumulated in any one pool.
            </summary>
        </member>
        <member name="P:MurrayGrant.Terninger.Accumulator.EntropyAccumulator.TotalReseedEvents">
            <summary>
            The total number of calls to NextSeed().
            </summary>
        </member>
        <member name="P:MurrayGrant.Terninger.Accumulator.EntropyAccumulator.LinearPoolsUsedInLastSeedGeneration">
            <summary>
            Bitmask of linear pools used in the last NextSeed() call.
            </summary>
        </member>
        <member name="P:MurrayGrant.Terninger.Accumulator.EntropyAccumulator.RandomPoolsUsedInLastSeedGeneration">
            <summary>
            Bitmask of random pools used in the last NextSeed() call.
            </summary>
        </member>
        <member name="P:MurrayGrant.Terninger.Accumulator.EntropyAccumulator.PoolCountUsedInLastSeedGeneration">
            <summary>
            Total number of pools used in the last NextSeed() call.
            </summary>
        </member>
        <member name="P:MurrayGrant.Terninger.Accumulator.EntropyAccumulator.TotalPoolCount">
            <summary>
            Total number of pools.
            </summary>
        </member>
        <member name="P:MurrayGrant.Terninger.Accumulator.EntropyAccumulator.LinearPoolCount">
            <summary>
            Total linear pools.
            </summary>
        </member>
        <member name="P:MurrayGrant.Terninger.Accumulator.EntropyAccumulator.RandomPoolCount">
            <summary>
            Total random pools.
            </summary>
        </member>
        <member name="M:MurrayGrant.Terninger.Accumulator.EntropyAccumulator.Add(MurrayGrant.Terninger.EntropySources.EntropyEvent)">
            <summary>
            Adds entropy from a particular source to the accumulator.
            </summary>
        </member>
        <member name="M:MurrayGrant.Terninger.Accumulator.EntropyAccumulator.NextSeed">
            <summary>
            Gets the next batch of seed material from the accumulated entropy. 
            This will be at least the hash size, but may be up to TotalPools * hash size.
            </summary>
        </member>
        <member name="M:MurrayGrant.Terninger.Accumulator.EntropyAccumulator.ResetPoolZero">
            <summary>
            Resets any entropy gathered in pool zero.
            </summary>
        </member>
        <member name="T:MurrayGrant.Terninger.Accumulator.EntropyPool">
            <summary>
            A pool of accumulated entropy, as defined in 9.5.2 of Fortuna spec.
            </summary>
        </member>
        <member name="M:MurrayGrant.Terninger.Accumulator.EntropyPool.Add(MurrayGrant.Terninger.EntropySources.EntropyEvent)">
            <summary>
            Adds a single entropy event to the pool.
            </summary>
        </member>
        <member name="M:MurrayGrant.Terninger.Accumulator.EntropyPool.GetCountOfBytesBySource">
            <summary>
            Get a copy of the current count of bytes by source.
            </summary>
        </member>
        <member name="M:MurrayGrant.Terninger.Accumulator.EntropyPool.GetDigest">
            <summary>
            Gets a hash digest of the entropy which has been accumulated.
            Note: if no entropy has accumulated, the result is deterministic.
            </summary>
        </member>
        <member name="T:MurrayGrant.Terninger.CryptoPrimitives.HashCryptoPrimitive">
            <summary>
            Container for a hash primitive. The key is imply prepended to the counter data.
            </summary>
        </member>
        <member name="T:MurrayGrant.Terninger.CryptoPrimitives.HmacCryptoPrimitive">
            <summary>
            Container for an HMAC - that is a hash plus a key.
            </summary>
        </member>
        <member name="T:MurrayGrant.Terninger.CryptoPrimitives.CryptoPrimitive">
            <summary>
            Shortcut constructors / factories for various ICryptoPrimitive instances.
            </summary>
        </member>
        <member name="T:MurrayGrant.Terninger.CryptoPrimitives.BlockCypherCryptoPrimitive">
            <summary>
            Container for a SymmetricAlgorithm with a key.
            </summary>
        </member>
        <member name="T:MurrayGrant.Terninger.CryptoPrimitives.ICryptoPrimitive">
            <summary>
            Interface to various encryption and hash algorithms.
            </summary>
        </member>
        <member name="T:MurrayGrant.Terninger.EntropySources.EntropySourceWithPeriod">
            <summary>
            Base class for entropy sources with a regular period they pool.
            They will return 
            This class is abstract.
            </summary>
        </member>
        <member name="M:MurrayGrant.Terninger.EntropySources.EntropySourceComparer.Equals(MurrayGrant.Terninger.EntropySources.IEntropySource,MurrayGrant.Terninger.EntropySources.IEntropySource)">
            <summary>
            Equals is based on reference equality.
            </summary>
        </member>
        <member name="M:MurrayGrant.Terninger.EntropySources.EntropySourceComparer.GetHashCode(MurrayGrant.Terninger.EntropySources.IEntropySource)">
            <summary>
            GetHasCode is based on Name and Type.
            </summary>
        </member>
        <member name="M:MurrayGrant.Terninger.EntropySources.EntropySourceComparer.Compare(MurrayGrant.Terninger.EntropySources.IEntropySource,MurrayGrant.Terninger.EntropySources.IEntropySource)">
            <summary>
            Sorting is based on Name.
            </summary>
        </member>
        <member name="T:MurrayGrant.Terninger.EntropySources.Local.UserSuppliedSource">
            <summary>
            A source of entropy, supplied from an external source.
            </summary>
        </member>
        <member name="T:MurrayGrant.Terninger.EntropySources.Local.ProcessStatsSource">
            <summary>
            An entropy source which uses system processes statistics as input.
            Polling defaults: 10 minutes at normal priority, 30 seconds at high priority, 50 minutes at low priority (5 x normal).
            </summary>
        </member>
        <member name="T:MurrayGrant.Terninger.EntropySources.Local.NetworkStatsSource">
            <summary>
            An entropy source which uses current network statistics as input.
            Polling defaults: 1 minute at normal priority, 5 seconds at high priority, 5 minutes at low priority (5 x normal).
            </summary>
        </member>
        <member name="T:MurrayGrant.Terninger.EntropySources.Local.CryptoRandomSource">
            <summary>
            An entropy source which uses RandomNumberGenerator.Create().
            </summary>
        </member>
        <member name="T:MurrayGrant.Terninger.EntropySources.Local.GCMemorySource">
            <summary>
            Am entropy source based on managed memory / garbage collector stats.
            </summary>
        </member>
        <member name="T:MurrayGrant.Terninger.EntropySources.Local.TimerSource">
            <summary>
            Am entropy source based on a high precision timer.
            </summary>
        </member>
        <member name="T:MurrayGrant.Terninger.EntropySources.Local.CurrentTimeSource">
            <summary>
            An entropy source based on the current system date and time.
            </summary>
        </member>
        <member name="T:MurrayGrant.Terninger.EntropySources.Network.BeaconNistExternalRandomSource">
            <summary>
            An entropy source which uses https://beacon.nist.gov/ as input.
            No published rate limits, but produces new output every 60 seconds and records it.
            </summary>
        </member>
        <member name="T:MurrayGrant.Terninger.EntropySources.Network.HotbitsExternalRandomSource">
            <summary>
            An entropy source which uses https://www.fourmilab.ch/hotbits/ as input.
            Either a pseudorandom source or true random (requires an API key).
            No published rate limits, but API uses true random bits so you should be extra cautious when using it.
            </summary>
        </member>
        <member name="T:MurrayGrant.Terninger.EntropySources.Network.RandomServerExternalRandomSource">
            <summary>
            An entropy source which uses http://www.randomserver.dyndns.org as input.
            This has no publicised rate limit so we use 12 hours as the normal polling period.
            </summary>
        </member>
        <member name="T:MurrayGrant.Terninger.EntropySources.Network.RandomNumbersInfoExternalRandomSource">
            <summary>
            An entropy source which uses http://www.randomnumbers.info/ as input.
            This has no publicised rate limit so we use 8 hours as the normal polling period, and get chunks of 256 numbers (386 bytes of entropy).
            Each number requested is between 0 and 4095, and is equivelent to 12 bits or 1.5 bytes of entropy.
            </summary>
        </member>
        <member name="T:MurrayGrant.Terninger.EntropySources.Network.RandomOrgExternalRandomSource">
            <summary>
            An entropy source which uses https://random.org as input.
            Either via a public interface or an API with a key.
            Rate limits of ~250k bits or 1000 requests per day, so use large chunks with 8 hour timouts.
            </summary>
        </member>
        <member name="T:MurrayGrant.Terninger.EntropySources.Network.AnuExternalRandomSource">
            <summary>
            An entropy source which uses https://qrng.anu.edu.au as input.
            This has no publicised rate limit (and boasts gigabit/sec entropy), but we use 12 hours as the normal polling period because we get 1kB each request.
            </summary>
        </member>
        <member name="T:MurrayGrant.Terninger.EntropySources.Network.ExternalWebContentSource">
            <summary>
            An entropy source which uses external web content as input, usually from social media or news services.
            </summary>
        </member>
        <member name="T:MurrayGrant.Terninger.EntropySources.Network.PingStatsSource">
            <summary>
            An entropy source which uses ping timings as input.
            </summary>
        </member>
        <member name="T:MurrayGrant.Terninger.EntropySources.StaticLocalEntropy">
            <summary>
            Sources of entropy which are local but change infrequently (eg: hostname, network address, memory, CPU).
            Can be used to differentiate external events which are similar (eg: the content of a news website). 
            </summary>
        </member>
        <member name="M:MurrayGrant.Terninger.EntropySources.CheapEntropy.Get32">
            <summary>
            Gets 32 bytes of entropy.
            </summary>
        </member>
        <member name="M:MurrayGrant.Terninger.EntropySources.CheapEntropy.Get16">
            <summary>
            Gets 16 bytes of entropy.
            </summary>
        </member>
        <member name="M:MurrayGrant.Terninger.EntropySources.CheapEntropy.GetNull">
            <summary>
            Gets a null result.
            </summary>
        </member>
        <member name="T:MurrayGrant.Terninger.EntropySources.EntropyEvent">
            <summary>
            Represents a single 'packet' of entropy from a source.
            </summary>
        </member>
        <member name="T:MurrayGrant.Terninger.EntropySources.IEntropySource">
            <summary>
            Interface to getting entropy from system events.
            See 9.5.1 of Fortuna spec.
            </summary>
        </member>
        <member name="P:MurrayGrant.Terninger.EntropySources.IEntropySource.Name">
            <summary>
            A unique name of the entropy source. Eg: Type name.
            </summary>
        </member>
        <member name="M:MurrayGrant.Terninger.EntropySources.IEntropySource.GetEntropyAsync(MurrayGrant.Terninger.Generator.EntropyPriority)">
            <summary>
            Gets entropy from the source.
            A source may return null if there is no entropy available.
            There is no limit to the amount of entropy which can be returned, but more than 4kB is overkill.
            Entropy Priority indicates how aggressively the source should read entropy.
            </summary>
        </member>
        <member name="T:MurrayGrant.Terninger.EntropySources.Test.CounterSource">
            <summary>
            An entropy source which returns an incrementing counter.
            </summary>
        </member>
        <member name="T:MurrayGrant.Terninger.EntropySources.Test.NullSource">
            <summary>
            A null entropy source. Just returns zero byte arrays.
            </summary>
        </member>
        <member name="T:MurrayGrant.Terninger.Generator.EntropyPriority">
            <summary>
            Represents how aggressively the scheduler is trying to read entropy.
            </summary>
        </member>
        <member name="F:MurrayGrant.Terninger.Generator.EntropyPriority.Low">
            <summary>
            The generator has not been used in considerable time, only minimal entropy is being read.
            Entropy sources may avoid or delay retrieving data in this state.
            </summary>
        </member>
        <member name="F:MurrayGrant.Terninger.Generator.EntropyPriority.Normal">
            <summary>
            The generator has been used recently, entropy is being read at a normal rate.
            </summary>
        </member>
        <member name="F:MurrayGrant.Terninger.Generator.EntropyPriority.High">
            <summary>
            The generator requires new seed material immediately, entropy is being read at the fastest possible rate.
            Entropy sources may ignore limits or timeouts to retreive additional data in this state.
            </summary>
        </member>
        <member name="P:MurrayGrant.Terninger.Generator.PooledEntropyCprngGenerator.EntropyPriority">
            <summary>
            Reports how aggressively the generator is trying to read entropy.
            </summary>
        </member>
        <member name="P:MurrayGrant.Terninger.Generator.PooledEntropyCprngGenerator.IsRunning">
            <summary>
            True if the generator is currently gathering entropy.
            </summary>
        </member>
        <member name="E:MurrayGrant.Terninger.Generator.PooledEntropyCprngGenerator.OnReseed">
            <summary>
            Event is raised after each time the generator is reseeded.
            </summary>
        </member>
        <member name="M:MurrayGrant.Terninger.Generator.PooledEntropyCprngGenerator.#ctor(System.Collections.Generic.IEnumerable{MurrayGrant.Terninger.EntropySources.IEntropySource},MurrayGrant.Terninger.Accumulator.EntropyAccumulator,MurrayGrant.Terninger.IReseedableRandomNumberGenerator,MurrayGrant.Terninger.Generator.PooledEntropyCprngGenerator.PooledGeneratorConfig)">
            <summary>
            Initialise the CPRNG with the given PRNG, accumulator, entropy sources and thread.
            This does not start the generator.
            </summary>
        </member>
        <member name="M:MurrayGrant.Terninger.Generator.PooledEntropyCprngGenerator.FillWithRandomBytes(System.Byte[])">
            <summary>
            Fill the supplied buffer with random bytes.
            This will throw if the inital seed has not been generated - await StartAndWaitForFirstSeed() first.
            </summary>
        </member>
        <member name="M:MurrayGrant.Terninger.Generator.PooledEntropyCprngGenerator.FillWithRandomBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            File the supplied buffer with count random bytes at the specified offset.
            This will throw if the inital seed has not been generated - await StartAndWaitForFirstSeed() first.
            </summary>
        </member>
        <member name="M:MurrayGrant.Terninger.Generator.PooledEntropyCprngGenerator.Start">
            <summary>
            Start the main entropy loop, to gather entropy over time.
            </summary>
        </member>
        <member name="M:MurrayGrant.Terninger.Generator.PooledEntropyCprngGenerator.StartAndWaitForFirstSeed">
            <summary>
            Start the main entropy loop, and wait for the first seed.
            </summary>
        </member>
        <member name="M:MurrayGrant.Terninger.Generator.PooledEntropyCprngGenerator.StartAndWaitForNthSeed(BigMath.Int128)">
            <summary>
            Start the main entropy loop, and wait for the specified reseed event.
            </summary>
        </member>
        <member name="M:MurrayGrant.Terninger.Generator.PooledEntropyCprngGenerator.WaitForNthSeed(BigMath.Int128)">
            <summary>
            Wait for the specified reseed event.
            </summary>
        </member>
        <member name="M:MurrayGrant.Terninger.Generator.PooledEntropyCprngGenerator.RequestStop">
            <summary>
            Stop the generater from gathering entropy.
            </summary>
        </member>
        <member name="M:MurrayGrant.Terninger.Generator.PooledEntropyCprngGenerator.Stop">
            <summary>
            Stop the generater from gathering entropy. A Task is returned when the generator has stopped.
            </summary>
        </member>
        <member name="M:MurrayGrant.Terninger.Generator.PooledEntropyCprngGenerator.StartReseed">
            <summary>
            Request the internal random number generator be reseeded as soon as possible.
            </summary>
        </member>
        <member name="M:MurrayGrant.Terninger.Generator.PooledEntropyCprngGenerator.Reseed">
            <summary>
            Request the internal random number generator be reseeded as soon as possible. A Task is returned when the reseed is completed.
            </summary>
        </member>
        <member name="M:MurrayGrant.Terninger.Generator.PooledEntropyCprngGenerator.ResetPoolZero">
            <summary>
            Resets the entropy contained in the first (zero) pool.
            When combined with Reseed(), this forces a minimal amount of entropy to be gathered before a reseed.
            This can be useful after reloading the generator from disk, or resuming from hybernation / sleep.
            </summary>
        </member>
        <member name="M:MurrayGrant.Terninger.Generator.PooledEntropyCprngGenerator.SetPriority(MurrayGrant.Terninger.Generator.EntropyPriority)">
            <summary>
            Sets the generator priority to the value provided.
            </summary>
        </member>
        <member name="M:MurrayGrant.Terninger.Generator.PooledEntropyCprngGenerator.AddInitialisedSource(MurrayGrant.Terninger.EntropySources.IEntropySource)">
            <summary>
            Add an initialised and ready to use entropy source to the generator.
            </summary>
        </member>
        <member name="M:MurrayGrant.Terninger.Generator.PooledEntropyCprngGenerator.AddInitialisedSources(System.Collections.Generic.IEnumerable{MurrayGrant.Terninger.EntropySources.IEntropySource})">
            <summary>
            Add an initialised and ready to use entropy source to the generator.
            </summary>
        </member>
        <member name="P:MurrayGrant.Terninger.Generator.PooledEntropyCprngGenerator.PooledGeneratorConfig.MinimumTimeBetweenReseeds">
            <summary>
            Minimum time between reseed events.
            Deafult: 100ms (according to Fortuna spec).
            </summary>
        </member>
        <member name="P:MurrayGrant.Terninger.Generator.PooledEntropyCprngGenerator.PooledGeneratorConfig.MaximumTimeBeforeReseed">
            <summary>
            After this time, a reseed will be required.
            Default: 12 hours.
            </summary>
        </member>
        <member name="P:MurrayGrant.Terninger.Generator.PooledEntropyCprngGenerator.PooledGeneratorConfig.MaximumBytesGeneratedBeforeReseed">
            <summary>
            After this many bytes of entropy are produced, a reseed will be triggered.
            Default: 16MB.
            </summary>
        </member>
        <member name="P:MurrayGrant.Terninger.Generator.PooledEntropyCprngGenerator.PooledGeneratorConfig.EntropyToTriggerReseedInHighPriority">
            <summary>
            Number of bytes of entropy in first pool to trigger a reseed when in High priority.
            Default: 48 bytes.
            </summary>
            <remarks>
            Actual entropy selected will be minimum of this, maximum of pool count * this, median of 3 * this.
            First seed will usually only have this amount of entropy.
            </remarks>
        </member>
        <member name="P:MurrayGrant.Terninger.Generator.PooledEntropyCprngGenerator.PooledGeneratorConfig.EntropyToTriggerReseedInNormalPriority">
            <summary>
            Number of bytes of entropy in first pool to trigger a reseed when in Normal priority.
            Default: 128 bytes.
            </summary>
            <remarks>
            Actual entropy selected will be minimum of this, maximum of pool count * this, median of 3 * this.
            </remarks>
        </member>
        <member name="P:MurrayGrant.Terninger.Generator.PooledEntropyCprngGenerator.PooledGeneratorConfig.EntropyToTriggerReseedInLowPriority">
            <summary>
            Number of bytes of entropy in first pool to trigger a reseed when in Idle priority.
            Default: 128 bytes.
            </summary>
            <remarks>
            Actual entropy selected will be minimum of this, maximum of pool count * this, median of 3 * this.
            </remarks>
        </member>
        <member name="P:MurrayGrant.Terninger.Generator.PooledEntropyCprngGenerator.PooledGeneratorConfig.PollWaitTimeInHighPriority">
            <summary>
            Time to wait between entropy polls when in High priority.
            Default: 1 ms
            </summary>
        </member>
        <member name="P:MurrayGrant.Terninger.Generator.PooledEntropyCprngGenerator.PooledGeneratorConfig.PollWaitTimeInNormalPriority">
            <summary>
            Time to wait between entropy polls when in Normal priority.
            Default: 10 sec
            </summary>
        </member>
        <member name="P:MurrayGrant.Terninger.Generator.PooledEntropyCprngGenerator.PooledGeneratorConfig.PollWaitTimeInLowPriority">
            <summary>
            Time to wait between entropy polls when in Low priority.
            Default: 1 min
            </summary>
        </member>
        <member name="P:MurrayGrant.Terninger.Generator.PooledEntropyCprngGenerator.PooledGeneratorConfig.ReseedCountBeforeSwitchToLowPriority">
            <summary>
            Number of reseeds at Normal priority without any further random requests before generator will drop to Low priority.
            Default: 10.
            </summary>
        </member>
        <member name="P:MurrayGrant.Terninger.Generator.PooledEntropyCprngGenerator.PooledGeneratorConfig.TimeBeforeSwitchToLowPriority">
            <summary>
            Time at Normal priority without any further random requests before generator will drop to Low priority.
            Default: 2 hours.
            </summary>
        </member>
        <member name="M:MurrayGrant.Terninger.Generator.PooledEntropyCprngGeneratorExtensions.With(MurrayGrant.Terninger.Generator.PooledEntropyCprngGenerator,System.Collections.Generic.IEnumerable{MurrayGrant.Terninger.EntropySources.IEntropySource})">
            <summary>
            Adds initialised entropy sources to the generator. 
            Fluent interface.
            </summary>
        </member>
        <member name="M:MurrayGrant.Terninger.Generator.PooledEntropyCprngGeneratorExtensions.With(MurrayGrant.Terninger.Generator.PooledEntropyCprngGenerator,MurrayGrant.Terninger.EntropySources.IEntropySource)">
            <summary>
            Adds an initialised entropy source to the generator. 
            Fluent interface.
            </summary>
        </member>
        <member name="M:MurrayGrant.Terninger.Generator.PooledEntropyCprngGeneratorExtensions.StartNoWait(MurrayGrant.Terninger.Generator.PooledEntropyCprngGenerator)">
            <summary>
            Starts the generator. Note that the return value is NOT immediately able to generate random numbers.
            Fluent interface.
            </summary>
        </member>
        <member name="M:MurrayGrant.Terninger.Generator.PooledEntropyCprngGeneratorExtensions.StartAndWaitForSeedAsync(MurrayGrant.Terninger.Generator.PooledEntropyCprngGenerator)">
            <summary>
            Starts the generator and waits for the first seed to become available.
            Fluent interface.
            </summary>
        </member>
        <member name="M:MurrayGrant.Terninger.Generator.CypherBasedPrngGenerator.#ctor(System.Byte[])">
            <summary>
            Initialise the CPRNG with the given key material, and default cypher (AES 256) and hash algorithm (SHA512), and zero counter.
            </summary>
        </member>
        <member name="M:MurrayGrant.Terninger.Generator.CypherBasedPrngGenerator.#ctor(System.Byte[],System.Func{System.Byte[]})">
            <summary>
            Initialise the CPRNG with the given key material, and default cypher (AES 256) and hash algorithm (SHA512), zero counter and supplied additional entropy source.
            </summary>
        </member>
        <member name="M:MurrayGrant.Terninger.Generator.CypherBasedPrngGenerator.#ctor(System.Byte[],MurrayGrant.Terninger.CryptoPrimitives.ICryptoPrimitive,System.Security.Cryptography.HashAlgorithm,MurrayGrant.Terninger.Generator.CypherCounter)">
            <summary>
            Initialise the CPRNG with the given key material, specified encryption algorithm and initial counter.
            </summary>
        </member>
        <member name="M:MurrayGrant.Terninger.Generator.CypherBasedPrngGenerator.#ctor(System.Byte[],MurrayGrant.Terninger.CryptoPrimitives.ICryptoPrimitive,System.Security.Cryptography.HashAlgorithm,MurrayGrant.Terninger.Generator.CypherCounter,System.Int32)">
            <summary>
            Initialise the CPRNG with the given key material, specified encryption algorithm and initial counter.
            </summary>
        </member>
        <member name="M:MurrayGrant.Terninger.Generator.CypherBasedPrngGenerator.#ctor(System.Byte[],MurrayGrant.Terninger.CryptoPrimitives.ICryptoPrimitive,System.Security.Cryptography.HashAlgorithm,MurrayGrant.Terninger.Generator.CypherCounter,System.Int32,System.Func{System.Byte[]})">
            <summary>
            Initialise the CPRNG with the given key material, specified encryption algorithm, initial counter and additional entropy source.
            </summary>
        </member>
        <member name="M:MurrayGrant.Terninger.Generator.CypherBasedPrngGenerator.Create(System.Byte[],MurrayGrant.Terninger.CryptoPrimitives.ICryptoPrimitive,System.Security.Cryptography.HashAlgorithm,MurrayGrant.Terninger.Generator.CypherCounter,System.Int32,System.Func{System.Byte[]})">
            <summary>
            Alternate constructor with named parameters.
            </summary>
        </member>
        <member name="T:MurrayGrant.Terninger.Generator.CypherCounter">
            <summary>
            An object encapsulating a large counter (minimum 64 bits), which is incremented by an ICryptoTransform to produce random bytes.
            This may be a single counter or an array of them.
            </summary>
        </member>
        <member name="M:MurrayGrant.Terninger.Generator.CypherCounter.CreateRandom(System.Int32,MurrayGrant.Terninger.IRandomNumberGenerator)">
            <summary>
            Creates a random counter using the generator supplied.
            </summary>
        </member>
        <member name="M:MurrayGrant.Terninger.Generator.CypherCounter.Dispose">
            <summary>
            Clears the counter and marks it as disposed. Further access to the counter will throw ObjectDisposedException.
            </summary>
        </member>
        <member name="M:MurrayGrant.Terninger.Generator.CypherCounter.GetCounter">
            <summary>
            Lets you observe the current counter value.
            Primarily for unit testing.
            </summary>
        </member>
        <member name="M:MurrayGrant.Terninger.Generator.CypherCounter.Increment">
            <summary>
            Increments the current counter value.
            </summary>
        </member>
        <member name="M:MurrayGrant.Terninger.Generator.CypherCounter.EncryptAndIncrement(System.Security.Cryptography.ICryptoTransform,System.Byte[],System.Int32)">
            <summary>
            Encrypts the counter into the buffer at the block number indicated, then increments the counter.
            </summary>
        </member>
        <member name="T:MurrayGrant.Terninger.Generator.RandomByteStream">
            <summary>
            Produces a stream of random bytes of arbitrary length.
            </summary>
        </member>
        <member name="T:MurrayGrant.Terninger.Generator.CryptoRandomWrapperGenerator">
            <summary>
            Wrapper for IRandomNumberGenerator around RandomNumberGenerator in System.Security.Cryptography namespace.
            </summary>
        </member>
        <member name="T:MurrayGrant.Terninger.Generator.StandardRandomWrapperGenerator">
            <summary>
            Wrapper for IRandomNumberGenerator around Random.
            </summary>
        </member>
        <member name="T:MurrayGrant.Terninger.IRandomNumberGenerator">
            <summary>
            Interface to any source of random numbers based on filling byte arrays.
            </summary>
        </member>
        <member name="P:MurrayGrant.Terninger.IRandomNumberGenerator.MaxRequestBytes">
            <summary>
            Maximum number of bytes which can be requested from the generator in one call.
            </summary>
        </member>
        <member name="M:MurrayGrant.Terninger.IRandomNumberGenerator.FillWithRandomBytes(System.Byte[])">
            <summary>
            Fills the array with random bytes.
            </summary>
            <param name="toFill">Array of bytes to overwrite with random data. Between 0 and MaxRequestBytes in size.</param>
        </member>
        <member name="M:MurrayGrant.Terninger.IRandomNumberGenerator.FillWithRandomBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Fills the array with count random bytes at the specified offset.
            </summary>
            <param name="toFill">Array of bytes to overwrite with random data.</param>
            <param name="offset">Offset into toFill to write to.</param>
            <param name="count">Number of bytes to write, between 0 and MaxRequestBytes in size.</param>
        </member>
        <member name="T:MurrayGrant.Terninger.IReseedableRandomNumberGenerator">
            <summary>
            Interface which builds on the standard source of random numbers by allowed additional seed material to be added.
            </summary>
        </member>
        <member name="M:MurrayGrant.Terninger.IReseedableRandomNumberGenerator.Reseed(System.Byte[])">
            <summary>
            Adds additional seed material to the random number generator.
            Existing material may be discarded or added to.
            </summary>
        </member>
        <member name="M:MurrayGrant.Terninger.Helpers.DisposeHelper.TryDispose(System.IDisposable)">
            <summary>
            Calls dispose() and ignores any ObjectDisposedExceptions.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:MurrayGrant.Terninger.Helpers.ByteArrayHelpers.EnsureArraySize(System.Byte[],System.Int32)">
            <summary>
            Ensure the byte array passed in is exactly required bytes in length.
            Longer arrays are trucated, shorter arrays are padded.
            </summary>
        </member>
        <member name="M:MurrayGrant.Terninger.Helpers.ByteArrayHelpers.LastBytes(System.Byte[],System.Int32)">
            <summary>
            Returns a new array with a copy of the last bytes of this array.
            </summary>
        </member>
        <member name="T:MurrayGrant.Terninger.LibLog.ILog">
            <summary>
            Simple interface that represent a logger.
            </summary>
        </member>
        <member name="M:MurrayGrant.Terninger.LibLog.ILog.Log(MurrayGrant.Terninger.LibLog.LogLevel,System.Func{System.String},System.Exception,System.Object[])">
            <summary>
            Log a message the specified log level.
            </summary>
            <param name="logLevel">The log level.</param>
            <param name="messageFunc">The message function.</param>
            <param name="exception">An optional exception.</param>
            <param name="formatParameters">Optional format parameters for the message generated by the messagefunc. </param>
            <returns>true if the message was logged. Otherwise false.</returns>
            <remarks>
            Note to implementers: the message func should not be called if the loglevel is not enabled
            so as not to incur performance penalties.
            
            To check IsEnabled call Log with only LogLevel and check the return value, no event will be written.
            </remarks>
        </member>
        <member name="T:MurrayGrant.Terninger.LibLog.LogLevel">
            <summary>
            The log level.
            </summary>
        </member>
        <member name="T:MurrayGrant.Terninger.LibLog.ILogProvider">
            <summary>
            Represents a way to get a <see cref="T:MurrayGrant.Terninger.LibLog.ILog"/>
            </summary>
        </member>
        <member name="M:MurrayGrant.Terninger.LibLog.ILogProvider.GetLogger(System.String)">
            <summary>
            Gets the specified named logger.
            </summary>
            <param name="name">Name of the logger.</param>
            <returns>The logger reference.</returns>
        </member>
        <member name="M:MurrayGrant.Terninger.LibLog.ILogProvider.OpenNestedContext(System.String)">
            <summary>
            Opens a nested diagnostics context. Not supported in EntLib logging.
            </summary>
            <param name="message">The message to add to the diagnostics context.</param>
            <returns>A disposable that when disposed removes the message from the context.</returns>
        </member>
        <member name="M:MurrayGrant.Terninger.LibLog.ILogProvider.OpenMappedContext(System.String,System.Object,System.Boolean)">
            <summary>
            Opens a mapped diagnostics context. Not supported in EntLib logging.
            </summary>
            <param name="key">A key.</param>
            <param name="value">A value.</param>
            <returns>A disposable that when disposed removes the map from the context.</returns>
        </member>
        <member name="T:MurrayGrant.Terninger.LibLog.LogProvider">
            <summary>
            Provides a mechanism to create instances of <see cref="T:MurrayGrant.Terninger.LibLog.ILog" /> objects.
            </summary>
        </member>
        <member name="M:MurrayGrant.Terninger.LibLog.LogProvider.SetCurrentLogProvider(MurrayGrant.Terninger.LibLog.ILogProvider)">
            <summary>
            Sets the current log provider.
            </summary>
            <param name="logProvider">The log provider.</param>
        </member>
        <member name="P:MurrayGrant.Terninger.LibLog.LogProvider.IsDisabled">
            <summary>
            Gets or sets a value indicating whether this is logging is disabled.
            </summary>
            <value>
            <c>true</c> if logging is disabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MurrayGrant.Terninger.LibLog.LogProvider.OnCurrentLogProviderSet">
            <summary>
            Sets an action that is invoked when a consumer of your library has called SetCurrentLogProvider. It is 
            important that hook into this if you are using child libraries (especially ilmerged ones) that are using
            LibLog (or other logging abstraction) so you adapt and delegate to them.
            <see cref="M:MurrayGrant.Terninger.LibLog.LogProvider.SetCurrentLogProvider(MurrayGrant.Terninger.LibLog.ILogProvider)"/> 
            </summary>
        </member>
        <member name="M:MurrayGrant.Terninger.LibLog.LogProvider.For``1">
            <summary>
            Gets a logger for the specified type.
            </summary>
            <typeparam name="T">The type whose name will be used for the logger.</typeparam>
            <returns>An instance of <see cref="T:MurrayGrant.Terninger.LibLog.ILog"/></returns>
        </member>
        <member name="M:MurrayGrant.Terninger.LibLog.LogProvider.GetCurrentClassLogger">
            <summary>
            Gets a logger for the current class.
            </summary>
            <returns>An instance of <see cref="T:MurrayGrant.Terninger.LibLog.ILog"/></returns>
        </member>
        <member name="M:MurrayGrant.Terninger.LibLog.LogProvider.GetLogger(System.Type,System.String)">
            <summary>
            Gets a logger for the specified type.
            </summary>
            <param name="type">The type whose name will be used for the logger.</param>
            <param name="fallbackTypeName">If the type is null then this name will be used as the log name instead</param>
            <returns>An instance of <see cref="T:MurrayGrant.Terninger.LibLog.ILog"/></returns>
        </member>
        <member name="M:MurrayGrant.Terninger.LibLog.LogProvider.GetLogger(System.String)">
            <summary>
            Gets a logger with the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>An instance of <see cref="T:MurrayGrant.Terninger.LibLog.ILog"/></returns>
        </member>
        <member name="M:MurrayGrant.Terninger.LibLog.LogProvider.OpenNestedContext(System.String)">
            <summary>
            Opens a nested diagnostics context.
            </summary>
            <param name="message">A message.</param>
            <returns>An <see cref="T:System.IDisposable"/> that closes context when disposed.</returns>
        </member>
        <member name="M:MurrayGrant.Terninger.LibLog.LogProvider.OpenMappedContext(System.String,System.Object,System.Boolean)">
            <summary>
            Opens a mapped diagnostics context.
            </summary>
            <param name="key">A key.</param>
            <param name="value">A value.</param>
            <returns>An <see cref="T:System.IDisposable"/> that closes context when disposed.</returns>
        </member>
        <member name="T:MurrayGrant.Terninger.LibLog.LoupeLogProvider.WriteDelegate">
            <summary>
            The form of the Loupe Log.Write method we're using
            </summary>
        </member>
        <member name="P:MurrayGrant.Terninger.LibLog.LoupeLogProvider.ProviderIsAvailableOverride">
            <summary>
            Gets or sets a value indicating whether [provider is available override]. Used in tests.
            </summary>
            <value>
            <c>true</c> if [provider is available override]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:MurrayGrant.Terninger.LibLog.LogMessageFormatter.SimulateStructuredLogging(System.Func{System.String},System.Object[])">
            <summary>
            Some logging frameworks support structured logging, such as serilog. This will allow you to add names to structured data in a format string:
            For example: Log("Log message to {user}", user). This only works with serilog, but as the user of LibLog, you don't know if serilog is actually 
            used. So, this class simulates that. it will replace any text in {curly braces} with an index number. 
            
            "Log {message} to {user}" would turn into => "Log {0} to {1}". Then the format parameters are handled using regular .net string.Format.
            </summary>
            <param name="messageBuilder">The message builder.</param>
            <param name="formatParameters">The format parameters.</param>
            <returns></returns>
        </member>
        <member name="M:MurrayGrant.Terninger.RandomNumberExtensions.GetRandomBytes(MurrayGrant.Terninger.IRandomNumberGenerator,System.Int32)">
            <summary>
            Generates the requested number of random bytes.
            </summary>
            <param name="generator"></param>
            <param name="byteCount"></param>
            <returns></returns>
        </member>
        <member name="M:MurrayGrant.Terninger.RandomNumberExtensions.CreateCypherBasedGenerator(MurrayGrant.Terninger.Generator.PooledEntropyCprngGenerator)">
            <summary>
            Creates a light weight PRNG from a Pooled Generator.
            If the Pooled Generator has not created its first seed, this will throw.
            </summary>
        </member>
        <member name="M:MurrayGrant.Terninger.RandomNumberExtensions.CreateCypherBasedGenerator(MurrayGrant.Terninger.Generator.PooledEntropyCprngGenerator,System.Int32)">
            <summary>
            Creates a light weight PRNG from a Pooled Generator.
            If the Pooled Generator has not created its first seed, this will throw.
            </summary>
        </member>
        <member name="M:MurrayGrant.Terninger.RandomNumberExtensions.CreateCypherBasedGeneratorAsync(MurrayGrant.Terninger.Generator.PooledEntropyCprngGenerator)">
            <summary>
            Creates a light weight PRNG from a Pooled Generator.
            This will wait until the Pooled Generator has created its first seed.
            </summary>
        </member>
        <member name="M:MurrayGrant.Terninger.RandomNumberExtensions.CreateCypherBasedGeneratorOrUninitialised(MurrayGrant.Terninger.Generator.PooledEntropyCprngGenerator)">
            <summary>
            Creates a light weight PRNG from a Pooled Generator.
            If the Pooled Generator has not created its first seed, this will use the system crypto random to derive a seed.
            </summary>
        </member>
        <member name="M:MurrayGrant.Terninger.RandomGenerator.CreateFortuna">
            <summary>
            Creates a pooled random number generator that conforms to the Fortuna spec.
            This is more conservative than Terninger; no randomised pools or low priority mode.
            </summary>
        </member>
        <member name="M:MurrayGrant.Terninger.RandomGenerator.CreateTerninger">
            <summary>
            Creates a pooled random number generator that makes improvements and changes to the Fortuna spec.
            This allows for less CPU usage, uses randomised pools, but isn't "official".
            </summary>
        </member>
        <member name="M:MurrayGrant.Terninger.RandomGenerator.StandardSources">
            <summary>
            The standard set of entropy sources, local to this computer.
            These are included by default in RandomNumberGenerator.CreateFortuna() and RandomNumberGenerator.CreateTerninger(). 
            </summary>
        </member>
        <member name="M:MurrayGrant.Terninger.RandomGenerator.NetworkSources(System.String,System.String,System.Nullable{System.Guid})">
            <summary>
            An additional set of sources which gather entropy from external network sources such as ping timings, web content and 3rd party entropy generators.
            </summary>
            <param name="userAgent">A user agent string to include in web requests. Highly recommended to identify yourself in case of problems.</param>
            <param name="hotBitsApiKey">API key for true random source at https://www.fourmilab.ch/hotbits </param>
            <param name="randomOrgApiKey">API for https://api.random.org </param>
        </member>
        <member name="M:MurrayGrant.Terninger.RandomGenerator.UserSuppliedEntropy(System.Byte[])">
            <summary>
            If you have one-off externally derived entropy, you can add it here.
            If you have a stream of external entropy, you should add your own UserSuppliedSource and call SetEntropy().
            </summary>
        </member>
        <member name="M:MurrayGrant.Terninger.RandomGenerator.CreateCypherBasedGenerator">
            <summary>
            Create a random number generator based on a cryptographic cypher using a random seed based on the system crypto random number generator.
            </summary>
        </member>
        <member name="M:MurrayGrant.Terninger.RandomGenerator.CreateCypherBasedGenerator(System.Byte[])">
            <summary>
            Create a random number generator based on a cryptographic cypher using the supplied seed.
            </summary>
        </member>
        <member name="M:MurrayGrant.Terninger.RandomGenerator.CreateUnbufferedCypherBasedGenerator">
            <summary>
            Create an unbuffered (slower but more secure) random number generator based on a cryptographic cypher using a random seed based on the system crypto random number generator.
            </summary>
        </member>
        <member name="M:MurrayGrant.Terninger.RandomGenerator.CreateUnbufferedCypherBasedGenerator(System.Byte[])">
            <summary>
            Create an unbuffered (slower but more secure) random number generator based on a cryptographic cypher using the supplied seed.
            </summary>
        </member>
        <member name="T:BigMath.Utils.ArrayUtils">
            <summary>
                Utils for the <see cref="T:System.Array" /> class.
            </summary>
        </member>
        <member name="M:BigMath.Utils.ArrayUtils.ConvertAll``2(``0[],System.Func{``0,``1})">
            <summary>
                Converts an array of one type to an array of another type.
            </summary>
            <returns>
                An array of the target type containing the converted elements from the source array.
            </returns>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to convert to a target type.</param>
            <param name="convert">A <see cref="T:System.Func`2" /> that converts each element from one type to another type.</param>
            <typeparam name="TInput">The type of the elements of the source array.</typeparam>
            <typeparam name="TOutput">The type of the elements of the target array.</typeparam>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="array" /> is null.-or-<paramref name="convert" /> is
                null.
            </exception>
        </member>
        <member name="M:BigMath.Utils.ArrayUtils.GetNonZeroLength(System.Byte[],System.Nullable{System.Boolean})">
            <summary>
                Get length of serial non zero items.
            </summary>
            <param name="bytes">Array of bytes.</param>
            <param name="asLittleEndian">True - skip all zero items from high. False - skip all zero items from low.</param>
            <returns>Length of serial non zero items.</returns>
        </member>
        <member name="M:BigMath.Utils.ArrayUtils.TrimZeros(System.Byte[],System.Nullable{System.Boolean})">
            <summary>
                Trim zero items.
            </summary>
            <param name="bytes">Array of bytes.</param>
            <param name="asLittleEndian">True - trim from high, False - trim from low.</param>
            <returns>Trimmed array of bytes.</returns>
        </member>
        <member name="M:BigMath.Utils.ArrayUtils.ToHexString(System.Byte[],System.Boolean,System.Int32,System.Boolean,System.Boolean)">
            <summary>
                Converts array of bytes to hexadecimal string.
            </summary>
            <param name="bytes">Bytes.</param>
            <param name="caps">Capitalize chars.</param>
            <param name="min">Minimum string length. 0 if there is no minimum length.</param>
            <param name="spaceEveryByte">Space every byte.</param>
            <param name="trimZeros">Trim zeros in the result string.</param>
            <returns>Hexadecimal string representation of the bytes array.</returns>
        </member>
        <member name="M:BigMath.Utils.ArrayUtils.ToHexString(System.ArraySegment{System.Byte},System.Boolean,System.Int32,System.Boolean,System.Boolean)">
            <summary>
                Converts array of bytes to hexadecimal string.
            </summary>
            <param name="bytes">Bytes.</param>
            <param name="caps">Capitalize chars.</param>
            <param name="min">Minimum string length. 0 if there is no minimum length.</param>
            <param name="spaceEveryByte">Space every byte.</param>
            <param name="trimZeros">Trim zeros in the result string.</param>
            <returns>Hexadecimal string representation of the bytes array.</returns>
        </member>
        <member name="M:BigMath.Utils.ArrayUtils.HexToBytes(System.String)">
            <summary>
                Converts string of hex numbers to array of bytes.
            </summary>
            <param name="hexString">String value.</param>
            <returns>Array of bytes.</returns>
        </member>
        <member name="T:BigMath.Utils.ExtendedBitConverter">
            <summary>
                Bit converter methods which support explicit endian.
            </summary>
        </member>
        <member name="F:BigMath.Utils.ExtendedBitConverter.IsLittleEndian">
            <summary>
                Indicates the byte order ("endianness") in which data is stored in this computer architecture.
            </summary>
        </member>
        <member name="M:BigMath.Utils.ExtendedBitConverter.ToBytes(System.Int16,System.Nullable{System.Boolean})">
            <summary>
                Converts <see cref="T:System.Int16" /> to array of bytes.
            </summary>
            <param name="value">Value.</param>
            <param name="asLittleEndian">Convert to little endian.</param>
            <returns>Array of bytes.</returns>
        </member>
        <member name="M:BigMath.Utils.ExtendedBitConverter.ToBytes(System.Int16,System.Byte[],System.Int32,System.Nullable{System.Boolean})">
            <summary>
                Converts <see cref="T:System.Int16" /> to array of bytes.
            </summary>
            <param name="value">Value.</param>
            <param name="buffer">Buffer at least 2 bytes.</param>
            <param name="offset">The starting position within <paramref name="buffer" />.</param>
            <param name="asLittleEndian">Convert to little endian.</param>
            <returns>Array of bytes.</returns>
        </member>
        <member name="M:BigMath.Utils.ExtendedBitConverter.ToInt16(System.Byte[],System.Int32,System.Nullable{System.Boolean})">
            <summary>
                Converts array of bytes to <see cref="T:System.Int16" />.
            </summary>
            <param name="bytes">An array of bytes.</param>
            <param name="offset">The starting position within <paramref name="bytes" />.</param>
            <param name="asLittleEndian">Convert from little endian.</param>
            <returns><see cref="T:System.Int16" /> value.</returns>
        </member>
        <member name="M:BigMath.Utils.ExtendedBitConverter.ToBytes(System.UInt16,System.Nullable{System.Boolean})">
            <summary>
                Converts <see cref="T:System.UInt16" /> to array of bytes.
            </summary>
            <param name="value">Value.</param>
            <param name="asLittleEndian">Convert to little endian.</param>
            <returns>Array of bytes.</returns>
        </member>
        <member name="M:BigMath.Utils.ExtendedBitConverter.ToBytes(System.UInt16,System.Byte[],System.Int32,System.Nullable{System.Boolean})">
            <summary>
                Converts <see cref="T:System.UInt16" /> to array of bytes.
            </summary>
            <param name="value">Value.</param>
            <param name="buffer">Buffer at least 2 bytes.</param>
            <param name="offset">The starting position within <paramref name="buffer" />.</param>
            <param name="asLittleEndian">Convert to little endian.</param>
            <returns>Array of bytes.</returns>
        </member>
        <member name="M:BigMath.Utils.ExtendedBitConverter.ToUInt16(System.Byte[],System.Int32,System.Nullable{System.Boolean})">
            <summary>
                Converts array of bytes to <see cref="T:System.UInt16" />.
            </summary>
            <param name="bytes">An array of bytes.</param>
            <param name="offset">The starting position within <paramref name="bytes" />.</param>
            <param name="asLittleEndian">Convert from little endian.</param>
            <returns><see cref="T:System.UInt16" /> value.</returns>
        </member>
        <member name="M:BigMath.Utils.ExtendedBitConverter.ToBytes(System.Int32,System.Nullable{System.Boolean})">
            <summary>
                Converts <see cref="T:System.Int32" /> to array of bytes.
            </summary>
            <param name="value">Value.</param>
            <param name="asLittleEndian">Convert to little endian.</param>
            <returns>Array of bytes.</returns>
        </member>
        <member name="M:BigMath.Utils.ExtendedBitConverter.ToBytes(System.Int32,System.Byte[],System.Int32,System.Nullable{System.Boolean})">
            <summary>
                Converts <see cref="T:System.Int32" /> to array of bytes.
            </summary>
            <param name="value">Value.</param>
            <param name="buffer">Buffer at least 4 bytes.</param>
            <param name="offset">The starting position within <paramref name="buffer" />.</param>
            <param name="asLittleEndian">Convert to little endian.</param>
            <returns>Array of bytes.</returns>
        </member>
        <member name="M:BigMath.Utils.ExtendedBitConverter.ToInt32(System.Byte[],System.Int32,System.Nullable{System.Boolean})">
            <summary>
                Converts array of bytes to <see cref="T:System.Int32" />.
            </summary>
            <param name="bytes">An array of bytes.</param>
            <param name="offset">The starting position within <paramref name="bytes" />.</param>
            <param name="asLittleEndian">Convert from little endian.</param>
            <returns><see cref="T:System.Int32" /> value.</returns>
        </member>
        <member name="M:BigMath.Utils.ExtendedBitConverter.ToBytes(System.UInt32,System.Nullable{System.Boolean})">
            <summary>
                Converts <see cref="T:System.UInt32" /> to array of bytes.
            </summary>
            <param name="value">Value.</param>
            <param name="asLittleEndian">Convert to little endian.</param>
            <returns>Array of bytes.</returns>
        </member>
        <member name="M:BigMath.Utils.ExtendedBitConverter.ToBytes(System.UInt32,System.Byte[],System.Int32,System.Nullable{System.Boolean})">
            <summary>
                Converts <see cref="T:System.UInt32" /> to array of bytes.
            </summary>
            <param name="value">Value.</param>
            <param name="buffer">Buffer at least 4 bytes.</param>
            <param name="offset">The starting position within <paramref name="buffer" />.</param>
            <param name="asLittleEndian">Convert to little endian.</param>
            <returns>Array of bytes.</returns>
        </member>
        <member name="M:BigMath.Utils.ExtendedBitConverter.ToUInt32(System.Byte[],System.Int32,System.Nullable{System.Boolean})">
            <summary>
                Converts array of bytes to <see cref="T:System.UInt32" />.
            </summary>
            <param name="bytes">An array of bytes.</param>
            <param name="offset">The starting position within <paramref name="bytes" />.</param>
            <param name="asLittleEndian">Convert from little endian.</param>
            <returns><see cref="T:System.UInt32" /> value.</returns>
        </member>
        <member name="M:BigMath.Utils.ExtendedBitConverter.ToBytes(System.Int64,System.Nullable{System.Boolean})">
            <summary>
                Converts <see cref="T:System.Int64" /> to array of bytes.
            </summary>
            <param name="value">Value.</param>
            <param name="asLittleEndian">Convert to little endian.</param>
            <returns>Array of bytes.</returns>
        </member>
        <member name="M:BigMath.Utils.ExtendedBitConverter.ToBytes(System.Int64,System.Byte[],System.Int32,System.Nullable{System.Boolean})">
            <summary>
                Converts <see cref="T:System.Int64" /> to array of bytes.
            </summary>
            <param name="value">Value.</param>
            <param name="buffer">Buffer at least 8 bytes.</param>
            <param name="offset">The starting position within <paramref name="buffer" />.</param>
            <param name="asLittleEndian">Convert to little endian.</param>
        </member>
        <member name="M:BigMath.Utils.ExtendedBitConverter.ToInt64(System.Byte[],System.Int32,System.Nullable{System.Boolean})">
            <summary>
                Converts array of bytes to <see cref="T:System.Int64" />.
            </summary>
            <param name="bytes">An array of bytes. </param>
            <param name="offset">The starting position within <paramref name="bytes" />.</param>
            <param name="asLittleEndian">Convert from little endian.</param>
            <returns><see cref="T:System.Int64" /> value.</returns>
        </member>
        <member name="M:BigMath.Utils.ExtendedBitConverter.ToBytes(System.UInt64,System.Nullable{System.Boolean})">
            <summary>
                Converts <see cref="T:System.UInt64" /> to array of bytes.
            </summary>
            <param name="value">Value.</param>
            <param name="asLittleEndian">Convert to little endian.</param>
            <returns>Array of bytes.</returns>
        </member>
        <member name="M:BigMath.Utils.ExtendedBitConverter.ToBytes(System.UInt64,System.Byte[],System.Int32,System.Nullable{System.Boolean})">
            <summary>
                Converts <see cref="T:System.UInt64" /> to array of bytes.
            </summary>
            <param name="value">Value.</param>
            <param name="buffer">Buffer at least 8 bytes.</param>
            <param name="offset">The starting position within <paramref name="buffer" />.</param>
            <param name="asLittleEndian">Convert to little endian.</param>
        </member>
        <member name="M:BigMath.Utils.ExtendedBitConverter.ToUInt64(System.Byte[],System.Int32,System.Nullable{System.Boolean})">
            <summary>
                Converts array of bytes to <see cref="T:System.UInt64" />.
            </summary>
            <param name="bytes">An array of bytes.</param>
            <param name="offset">The starting position within <paramref name="bytes" />.</param>
            <param name="asLittleEndian">Convert from little endian.</param>
            <returns><see cref="T:System.UInt64" /> value.</returns>
        </member>
        <member name="M:BigMath.Utils.ExtendedBitConverter.ToBytes(BigMath.Int128,System.Byte[],System.Int32,System.Nullable{System.Boolean})">
            <summary>
                Converts an <see cref="T:BigMath.Int128" /> value to an array of bytes.
            </summary>
            <param name="value">Value.</param>
            <param name="buffer">An array of bytes.</param>
            <param name="offset">The starting position within <paramref name="buffer" />.</param>
            <param name="asLittleEndian">Convert from little endian.</param>
        </member>
        <member name="M:BigMath.Utils.ExtendedBitConverter.ToBytes(BigMath.Int128,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
                Converts an <see cref="T:BigMath.Int128" /> value to a byte array.
            </summary>
            <param name="value">Value.</param>
            <param name="asLittleEndian">Convert from little endian.</param>
            <param name="trimZeros">Trim zero bytes from left or right, depending on endian.</param>
            <returns>Array of bytes.</returns>
        </member>
        <member name="M:BigMath.Utils.ExtendedBitConverter.ToInt128(System.Byte[],System.Int32,System.Nullable{System.Boolean})">
            <summary>
                Converts array of bytes to <see cref="T:BigMath.Int128" />.
            </summary>
            <param name="bytes">An array of bytes.</param>
            <param name="offset">The starting position within <paramref name="bytes" />.</param>
            <param name="asLittleEndian">Convert from little endian.</param>
            <returns><see cref="T:BigMath.Int128" /> value.</returns>
        </member>
        <member name="T:BigMath.Utils.MathUtils">
            <summary>
                Math utils.
            </summary>
        </member>
        <member name="M:BigMath.Utils.MathUtils.Shift(System.UInt64[],System.Int32)">
            <summary>
                Bitwise shift array of <see cref="T:System.UInt64" />.
            </summary>
            <param name="values">Bits to shift. Lower bits have lower index in array.</param>
            <param name="shift">Shift amount in bits. Negative for left shift, positive for right shift.</param>
            <returns>Shifted values.</returns>
        </member>
        <member name="M:BigMath.Utils.MathUtils.ShiftRight(System.UInt64[],System.Int32)">
            <summary>
                Bitwise right shift.
            </summary>
            <param name="values">Bits to shift. Lower bits have lower index in array.</param>
            <param name="shift">Shift amount in bits.</param>
            <returns>Shifted values.</returns>
        </member>
        <member name="M:BigMath.Utils.MathUtils.ShiftRightSigned(System.UInt64[],System.Int32)">
            <summary>
                Bitwise right shift.
                
                Using an array of ulong's, but when called from Int128 and Int256, value is really a signed number, so we need to preserve the sign bits
            </summary>
            <param name="values">Bits to shift. Lower bits have lower index in array.</param>
            <param name="shift">Shift amount in bits.</param>
            <returns>Shifted values.</returns>
        </member>
        <member name="M:BigMath.Utils.MathUtils.ShiftLeft(System.UInt64[],System.Int32)">
            <summary>
                Bitwise right shift.
            </summary>
            <param name="values">Bits to shift. Lower bits have lower index in array.</param>
            <param name="shift">Shift amount in bits.</param>
            <returns>Shifted values.</returns>
        </member>
        <member name="T:BigMath.Int128">
            <summary>
                Represents a 128-bit signed integer.
            </summary>
        </member>
        <member name="F:BigMath.Int128.Zero">
            <summary>
                Gets a value that represents the number 0 (zero).
            </summary>
        </member>
        <member name="F:BigMath.Int128.MaxValue">
            <summary>
                Represents the largest possible value of an Int128.
            </summary>
        </member>
        <member name="F:BigMath.Int128.MinValue">
            <summary>
                Represents the smallest possible value of an Int128.
            </summary>
        </member>
        <member name="M:BigMath.Int128.#ctor(System.Byte)">
            <summary>
                Initializes a new instance of the <see cref="T:BigMath.Int128" /> struct.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:BigMath.Int128.#ctor(System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:BigMath.Int128" /> struct.
            </summary>
            <param name="value">if set to <c>true</c> [value].</param>
        </member>
        <member name="M:BigMath.Int128.#ctor(System.Char)">
            <summary>
                Initializes a new instance of the <see cref="T:BigMath.Int128" /> struct.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:BigMath.Int128.#ctor(System.Decimal)">
            <summary>
                Initializes a new instance of the <see cref="T:BigMath.Int128" /> struct.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:BigMath.Int128.#ctor(System.Double)">
            <summary>
                Initializes a new instance of the <see cref="T:BigMath.Int128" /> struct.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:BigMath.Int128.#ctor(System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:BigMath.Int128" /> struct.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:BigMath.Int128.#ctor(System.Int16)">
            <summary>
                Initializes a new instance of the <see cref="T:BigMath.Int128" /> struct.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:BigMath.Int128.#ctor(System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:BigMath.Int128" /> struct.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:BigMath.Int128.#ctor(System.Int64)">
            <summary>
                Initializes a new instance of the <see cref="T:BigMath.Int128" /> struct.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:BigMath.Int128.#ctor(System.SByte)">
            <summary>
                Initializes a new instance of the <see cref="T:BigMath.Int128" /> struct.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:BigMath.Int128.#ctor(System.UInt16)">
            <summary>
                Initializes a new instance of the <see cref="T:BigMath.Int128" /> struct.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:BigMath.Int128.#ctor(System.UInt32)">
            <summary>
                Initializes a new instance of the <see cref="T:BigMath.Int128" /> struct.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:BigMath.Int128.#ctor(System.UInt64)">
            <summary>
                Initializes a new instance of the <see cref="T:BigMath.Int128" /> struct.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:BigMath.Int128.#ctor(System.Guid)">
            <summary>
                Initializes a new instance of the <see cref="T:BigMath.Int128" /> struct.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:BigMath.Int128.#ctor(System.Int32,System.UInt32[])">
            <summary>
                Initializes a new instance of the <see cref="T:BigMath.Int128" /> struct.
            </summary>
            <param name="sign">The sign.</param>
            <param name="ints">The ints.</param>
        </member>
        <member name="P:BigMath.Int128.High">
            <summary>
                Higher 64 bits.
            </summary>
        </member>
        <member name="P:BigMath.Int128.Low">
            <summary>
                Lower 64 bits.
            </summary>
        </member>
        <member name="P:BigMath.Int128.Sign">
            <summary>
                Gets a number that indicates the sign (negative, positive, or zero) of the current Int128 object.
            </summary>
            <value>A number that indicates the sign of the Int128 object</value>
        </member>
        <member name="M:BigMath.Int128.GetHashCode">
            <summary>
                Returns a hash code for this instance.
            </summary>
            <returns>
                A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:BigMath.Int128.Equals(System.Object)">
            <summary>
                Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
                true if obj has the same value as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:BigMath.Int128.Equals(BigMath.Int128)">
            <summary>
                Returns a value indicating whether this instance is equal to a specified Int64 value.
            </summary>
            <param name="obj">The obj.</param>
            <returns>
                true if obj has the same value as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:BigMath.Int128.ToString">
            <summary>
                Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
                A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:BigMath.Int128.ToString(System.String,System.IFormatProvider)">
            <summary>
                Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format. Only x, X, g, G, d, D are supported.</param>
            <param name="formatProvider">An object that supplies culture-specific formatting information about this instance.</param>
            <returns>
                A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:BigMath.Int128.TryConvert(System.Type,System.IFormatProvider,System.Boolean,System.Object@)">
            <summary>
                Converts the numeric value to an equivalent object. The return value indicates whether the conversion succeeded.
            </summary>
            <param name="conversionType">The target conversion type.</param>
            <param name="provider">An object that supplies culture-specific information about the conversion.</param>
            <param name="asLittleEndian">As little endian.</param>
            <param name="value">
                When this method returns, contains the value that is equivalent to the numeric value, if the
                conversion succeeded, or is null if the conversion failed. This parameter is passed uninitialized.
            </param>
            <returns>true if this value was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:BigMath.Int128.Parse(System.String)">
            <summary>
                Converts the string representation of a number to its Int128 equivalent.
            </summary>
            <param name="value">A string that contains a number to convert.</param>
            <returns>
                A value that is equivalent to the number specified in the value parameter.
            </returns>
        </member>
        <member name="M:BigMath.Int128.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
                Converts the string representation of a number in a specified style format to its Int128 equivalent.
            </summary>
            <param name="value">A string that contains a number to convert.</param>
            <param name="style">A bitwise combination of the enumeration values that specify the permitted format of value.</param>
            <returns>
                A value that is equivalent to the number specified in the value parameter.
            </returns>
        </member>
        <member name="M:BigMath.Int128.Parse(System.String,System.IFormatProvider)">
            <summary>
                Converts the string representation of a number in a culture-specific format to its Int128 equivalent.
            </summary>
            <param name="value">A string that contains a number to convert.</param>
            <param name="provider">An object that provides culture-specific formatting information about value.</param>
            <returns>
                A value that is equivalent to the number specified in the value parameter.
            </returns>
        </member>
        <member name="M:BigMath.Int128.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
                Converts the string representation of a number in a specified style and culture-specific format to its Int128
                equivalent.
            </summary>
            <param name="value">A string that contains a number to convert.</param>
            <param name="style">A bitwise combination of the enumeration values that specify the permitted format of value.</param>
            <param name="provider">An object that provides culture-specific formatting information about value.</param>
            <returns>A value that is equivalent to the number specified in the value parameter.</returns>
        </member>
        <member name="M:BigMath.Int128.TryParse(System.String,BigMath.Int128@)">
            <summary>
                Tries to convert the string representation of a number to its Int128 equivalent, and returns a value that indicates
                whether the conversion succeeded..
            </summary>
            <param name="value">The string representation of a number.</param>
            <param name="result">
                When this method returns, contains the Int128 equivalent to the number that is contained in value,
                or Int128.Zero if the conversion failed. This parameter is passed uninitialized.
            </param>
            <returns>
                true if the value parameter was converted successfully; otherwise, false.
            </returns>
        </member>
        <member name="M:BigMath.Int128.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,BigMath.Int128@)">
            <summary>
                Tries to convert the string representation of a number in a specified style and culture-specific format to its
                Int128 equivalent, and returns a value that indicates whether the conversion succeeded..
            </summary>
            <param name="value">
                The string representation of a number. The string is interpreted using the style specified by
                style.
            </param>
            <param name="style">
                A bitwise combination of enumeration values that indicates the style elements that can be present
                in value. A typical value to specify is NumberStyles.Integer.
            </param>
            <param name="provider">An object that supplies culture-specific formatting information about value.</param>
            <param name="result">
                When this method returns, contains the Int128 equivalent to the number that is contained in value,
                or Int128.Zero if the conversion failed. This parameter is passed uninitialized.
            </param>
            <returns>true if the value parameter was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:BigMath.Int128.ToType(System.Type,System.IFormatProvider,System.Boolean)">
            <summary>
                Converts the value of this instance to an <see cref="T:System.Object" /> of the specified
                <see cref="T:System.Type" /> that has an equivalent value, using the specified culture-specific formatting
                information.
            </summary>
            <param name="conversionType">The <see cref="T:System.Type" /> to which the value of this instance is converted.</param>
            <param name="provider">
                An <see cref="T:System.IFormatProvider" /> interface implementation that supplies
                culture-specific formatting information.
            </param>
            <param name="asLittleEndian">As little endian.</param>
            <returns>
                An <see cref="T:System.Object" /> instance of type <paramref name="conversionType" /> whose value is equivalent to
                the value of this instance.
            </returns>
        </member>
        <member name="M:BigMath.Int128.System#IComparable#CompareTo(System.Object)">
            <summary>
                Compares the current instance with another object of the same type and returns an integer that indicates whether
                the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
                A value that indicates the relative order of the objects being compared. The return value has these meanings: Value
                Meaning Less than zero This instance is less than <paramref name="obj" />. Zero This instance is equal to
                <paramref name="obj" />. Greater than zero This instance is greater than <paramref name="obj" />.
            </returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="obj" /> is not the same type as this instance.
            </exception>
        </member>
        <member name="M:BigMath.Int128.Compare(BigMath.Int128,System.Object)">
            <summary>
                Compares two Int128 values and returns an integer that indicates whether the first value is less than, equal to, or
                greater than the second value.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>A signed integer that indicates the relative values of left and right, as shown in the following table.</returns>
        </member>
        <member name="M:BigMath.Int128.Compare(BigMath.Int128,BigMath.Int128)">
            <summary>
                Compares two 128-bit signed integer values and returns an integer that indicates whether the first value is less
                than, equal to, or greater than the second value.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
                A signed number indicating the relative values of this instance and value.
            </returns>
        </member>
        <member name="M:BigMath.Int128.CompareTo(BigMath.Int128)">
            <summary>
                Compares this instance to a specified 128-bit signed integer and returns an indication of their relative values.
            </summary>
            <param name="value">An integer to compare.</param>
            <returns>A signed number indicating the relative values of this instance and value.</returns>
        </member>
        <member name="M:BigMath.Int128.Negate(BigMath.Int128)">
            <summary>
                Negates a specified Int128 value.
            </summary>
            <param name="value">The value to negate.</param>
            <returns>The result of the value parameter multiplied by negative one (-1).</returns>
        </member>
        <member name="M:BigMath.Int128.ToAbs">
            <summary>
                Gets the absolute value this object.
            </summary>
            <returns>The absolute value.</returns>
        </member>
        <member name="M:BigMath.Int128.Abs(BigMath.Int128)">
            <summary>
                Gets the absolute value of an Int128 object.
            </summary>
            <param name="value">A number.</param>
            <returns>
                The absolute value.
            </returns>
        </member>
        <member name="M:BigMath.Int128.Add(BigMath.Int128,BigMath.Int128)">
            <summary>
                Adds two Int128 values and returns the result.
            </summary>
            <param name="left">The first value to add.</param>
            <param name="right">The second value to add.</param>
            <returns>The sum of left and right.</returns>
        </member>
        <member name="M:BigMath.Int128.Subtract(BigMath.Int128,BigMath.Int128)">
            <summary>
                Subtracts one Int128 value from another and returns the result.
            </summary>
            <param name="left">The value to subtract from (the minuend).</param>
            <param name="right">The value to subtract (the subtrahend).</param>
            <returns>The result of subtracting right from left.</returns>
        </member>
        <member name="M:BigMath.Int128.Divide(BigMath.Int128,BigMath.Int128)">
            <summary>
                Divides one Int128 value by another and returns the result.
            </summary>
            <param name="dividend">The value to be divided.</param>
            <param name="divisor">The value to divide by.</param>
            <returns>The quotient of the division.</returns>
        </member>
        <member name="M:BigMath.Int128.DivRem(BigMath.Int128,BigMath.Int128,BigMath.Int128@)">
            <summary>
                Divides one Int128 value by another, returns the result, and returns the remainder in an output parameter.
            </summary>
            <param name="dividend">The value to be divided.</param>
            <param name="divisor">The value to divide by.</param>
            <param name="remainder">
                When this method returns, contains an Int128 value that represents the remainder from the
                division. This parameter is passed uninitialized.
            </param>
            <returns>
                The quotient of the division.
            </returns>
        </member>
        <member name="M:BigMath.Int128.Remainder(BigMath.Int128,BigMath.Int128)">
            <summary>
                Performs integer division on two Int128 values and returns the remainder.
            </summary>
            <param name="dividend">The value to be divided.</param>
            <param name="divisor">The value to divide by.</param>
            <returns>The remainder after dividing dividend by divisor.</returns>
        </member>
        <member name="M:BigMath.Int128.ToUIn64Array">
            <summary>
                Converts an Int128 value to an unsigned long array.
            </summary>
            <returns>
                The value of the current Int128 object converted to an array of unsigned integers.
            </returns>
        </member>
        <member name="M:BigMath.Int128.ToUIn32Array">
            <summary>
                Converts an Int128 value to an unsigned integer array.
            </summary>
            <returns>The value of the current Int128 object converted to an array of unsigned integers.</returns>
        </member>
        <member name="M:BigMath.Int128.Multiply(BigMath.Int128,BigMath.Int128)">
            <summary>
                Returns the product of two Int128 values.
            </summary>
            <param name="left">The first number to multiply.</param>
            <param name="right">The second number to multiply.</param>
            <returns>The product of the left and right parameters.</returns>
        </member>
        <member name="M:BigMath.Int128.op_Implicit(System.Boolean)~BigMath.Int128">
            <summary>
                Performs an implicit conversion from <see cref="T:System.Boolean" /> to <see cref="T:BigMath.Int128" />.
            </summary>
            <param name="value">if set to <c>true</c> [value].</param>
            <returns>
                The result of the conversion.
            </returns>
        </member>
        <member name="M:BigMath.Int128.op_Implicit(System.Byte)~BigMath.Int128">
            <summary>
                Performs an implicit conversion from <see cref="T:System.Byte" /> to <see cref="T:BigMath.Int128" />.
            </summary>
            <param name="value">The value.</param>
            <returns>
                The result of the conversion.
            </returns>
        </member>
        <member name="M:BigMath.Int128.op_Implicit(System.Char)~BigMath.Int128">
            <summary>
                Performs an implicit conversion from <see cref="T:System.Char" /> to <see cref="T:BigMath.Int128" />.
            </summary>
            <param name="value">The value.</param>
            <returns>
                The result of the conversion.
            </returns>
        </member>
        <member name="M:BigMath.Int128.op_Explicit(System.Decimal)~BigMath.Int128">
            <summary>
                Performs an explicit conversion from <see cref="T:System.Decimal" /> to <see cref="T:BigMath.Int128" />.
            </summary>
            <param name="value">The value.</param>
            <returns>
                The result of the conversion.
            </returns>
        </member>
        <member name="M:BigMath.Int128.op_Explicit(System.Double)~BigMath.Int128">
            <summary>
                Performs an explicit conversion from <see cref="T:System.Double" /> to <see cref="T:BigMath.Int128" />.
            </summary>
            <param name="value">The value.</param>
            <returns>
                The result of the conversion.
            </returns>
        </member>
        <member name="M:BigMath.Int128.op_Implicit(System.Int16)~BigMath.Int128">
            <summary>
                Performs an implicit conversion from <see cref="T:System.Int16" /> to <see cref="T:BigMath.Int128" />.
            </summary>
            <param name="value">The value.</param>
            <returns>
                The result of the conversion.
            </returns>
        </member>
        <member name="M:BigMath.Int128.op_Implicit(System.Int32)~BigMath.Int128">
            <summary>
                Performs an implicit conversion from <see cref="T:System.Int32" /> to <see cref="T:BigMath.Int128" />.
            </summary>
            <param name="value">The value.</param>
            <returns>
                The result of the conversion.
            </returns>
        </member>
        <member name="M:BigMath.Int128.op_Implicit(System.Int64)~BigMath.Int128">
            <summary>
                Performs an implicit conversion from <see cref="T:System.Int64" /> to <see cref="T:BigMath.Int128" />.
            </summary>
            <param name="value">The value.</param>
            <returns>
                The result of the conversion.
            </returns>
        </member>
        <member name="M:BigMath.Int128.op_Implicit(System.SByte)~BigMath.Int128">
            <summary>
                Performs an implicit conversion from <see cref="T:System.SByte" /> to <see cref="T:BigMath.Int128" />.
            </summary>
            <param name="value">The value.</param>
            <returns>
                The result of the conversion.
            </returns>
        </member>
        <member name="M:BigMath.Int128.op_Explicit(System.Single)~BigMath.Int128">
            <summary>
                Performs an explicit conversion from <see cref="T:System.Single" /> to <see cref="T:BigMath.Int128" />.
            </summary>
            <param name="value">The value.</param>
            <returns>
                The result of the conversion.
            </returns>
        </member>
        <member name="M:BigMath.Int128.op_Implicit(System.UInt16)~BigMath.Int128">
            <summary>
                Performs an implicit conversion from <see cref="T:System.UInt16" /> to <see cref="T:BigMath.Int128" />.
            </summary>
            <param name="value">The value.</param>
            <returns>
                The result of the conversion.
            </returns>
        </member>
        <member name="M:BigMath.Int128.op_Implicit(System.UInt32)~BigMath.Int128">
            <summary>
                Performs an implicit conversion from <see cref="T:System.UInt32" /> to <see cref="T:BigMath.Int128" />.
            </summary>
            <param name="value">The value.</param>
            <returns>
                The result of the conversion.
            </returns>
        </member>
        <member name="M:BigMath.Int128.op_Implicit(System.UInt64)~BigMath.Int128">
            <summary>
                Performs an implicit conversion from <see cref="T:System.UInt64" /> to <see cref="T:BigMath.Int128" />.
            </summary>
            <param name="value">The value.</param>
            <returns>
                The result of the conversion.
            </returns>
        </member>
        <member name="M:BigMath.Int128.op_Explicit(BigMath.Int128)~System.Boolean">
            <summary>
                Performs an explicit conversion from <see cref="T:BigMath.Int128" /> to <see cref="T:System.Boolean" />.
            </summary>
            <param name="value">The value.</param>
            <returns>
                The result of the conversion.
            </returns>
        </member>
        <member name="M:BigMath.Int128.op_Explicit(BigMath.Int128)~System.Byte">
            <summary>
                Performs an explicit conversion from <see cref="T:BigMath.Int128" /> to <see cref="T:System.Byte" />.
            </summary>
            <param name="value">The value.</param>
            <returns>
                The result of the conversion.
            </returns>
        </member>
        <member name="M:BigMath.Int128.op_Explicit(BigMath.Int128)~System.Char">
            <summary>
                Performs an explicit conversion from <see cref="T:BigMath.Int128" /> to <see cref="T:System.Char" />.
            </summary>
            <param name="value">The value.</param>
            <returns>
                The result of the conversion.
            </returns>
        </member>
        <member name="M:BigMath.Int128.op_Explicit(BigMath.Int128)~System.Decimal">
            <summary>
                Performs an explicit conversion from <see cref="T:BigMath.Int128" /> to <see cref="T:System.Decimal" />.
            </summary>
            <param name="value">The value.</param>
            <returns>
                The result of the conversion.
            </returns>
        </member>
        <member name="M:BigMath.Int128.op_Explicit(BigMath.Int128)~System.Double">
            <summary>
                Performs an explicit conversion from <see cref="T:BigMath.Int128" /> to <see cref="T:System.Double" />.
            </summary>
            <param name="value">The value.</param>
            <returns>
                The result of the conversion.
            </returns>
        </member>
        <member name="M:BigMath.Int128.op_Explicit(BigMath.Int128)~System.Single">
            <summary>
                Performs an explicit conversion from <see cref="T:BigMath.Int128" /> to <see cref="T:System.Single" />.
            </summary>
            <param name="value">The value.</param>
            <returns>
                The result of the conversion.
            </returns>
        </member>
        <member name="M:BigMath.Int128.op_Explicit(BigMath.Int128)~System.Int16">
            <summary>
                Performs an explicit conversion from <see cref="T:BigMath.Int128" /> to <see cref="T:System.Int16" />.
            </summary>
            <param name="value">The value.</param>
            <returns>
                The result of the conversion.
            </returns>
        </member>
        <member name="M:BigMath.Int128.op_Explicit(BigMath.Int128)~System.Int32">
            <summary>
                Performs an explicit conversion from <see cref="T:BigMath.Int128" /> to <see cref="T:System.Int32" />.
            </summary>
            <param name="value">The value.</param>
            <returns>
                The result of the conversion.
            </returns>
        </member>
        <member name="M:BigMath.Int128.op_Explicit(BigMath.Int128)~System.Int64">
            <summary>
                Performs an explicit conversion from <see cref="T:BigMath.Int128" /> to <see cref="T:System.Int64" />.
            </summary>
            <param name="value">The value.</param>
            <returns>
                The result of the conversion.
            </returns>
        </member>
        <member name="M:BigMath.Int128.op_Explicit(BigMath.Int128)~System.UInt32">
            <summary>
                Performs an explicit conversion from <see cref="T:BigMath.Int128" /> to <see cref="T:System.UInt32" />.
            </summary>
            <param name="value">The value.</param>
            <returns>
                The result of the conversion.
            </returns>
        </member>
        <member name="M:BigMath.Int128.op_Explicit(BigMath.Int128)~System.UInt16">
            <summary>
                Performs an explicit conversion from <see cref="T:BigMath.Int128" /> to <see cref="T:System.UInt16" />.
            </summary>
            <param name="value">The value.</param>
            <returns>
                The result of the conversion.
            </returns>
        </member>
        <member name="M:BigMath.Int128.op_Explicit(BigMath.Int128)~System.UInt64">
            <summary>
                Performs an explicit conversion from <see cref="T:BigMath.Int128" /> to <see cref="T:System.UInt64" />.
            </summary>
            <param name="value">The value.</param>
            <returns>
                The result of the conversion.
            </returns>
        </member>
        <member name="M:BigMath.Int128.op_GreaterThan(BigMath.Int128,BigMath.Int128)">
            <summary>
                Implements the operator &gt;.
            </summary>
            <param name="left">The x.</param>
            <param name="right">The y.</param>
            <returns>
                The result of the operator.
            </returns>
        </member>
        <member name="M:BigMath.Int128.op_LessThan(BigMath.Int128,BigMath.Int128)">
            <summary>
                Implements the operator &lt;.
            </summary>
            <param name="left">The x.</param>
            <param name="right">The y.</param>
            <returns>
                The result of the operator.
            </returns>
        </member>
        <member name="M:BigMath.Int128.op_GreaterThanOrEqual(BigMath.Int128,BigMath.Int128)">
            <summary>
                Implements the operator &gt;=.
            </summary>
            <param name="left">The x.</param>
            <param name="right">The y.</param>
            <returns>
                The result of the operator.
            </returns>
        </member>
        <member name="M:BigMath.Int128.op_LessThanOrEqual(BigMath.Int128,BigMath.Int128)">
            <summary>
                Implements the operator &lt;=.
            </summary>
            <param name="left">The x.</param>
            <param name="right">The y.</param>
            <returns>
                The result of the operator.
            </returns>
        </member>
        <member name="M:BigMath.Int128.op_Inequality(BigMath.Int128,BigMath.Int128)">
            <summary>
                Implements the operator !=.
            </summary>
            <param name="left">The x.</param>
            <param name="right">The y.</param>
            <returns>
                The result of the operator.
            </returns>
        </member>
        <member name="M:BigMath.Int128.op_Equality(BigMath.Int128,BigMath.Int128)">
            <summary>
                Implements the operator ==.
            </summary>
            <param name="left">The x.</param>
            <param name="right">The y.</param>
            <returns>
                The result of the operator.
            </returns>
        </member>
        <member name="M:BigMath.Int128.op_UnaryPlus(BigMath.Int128)">
            <summary>
                Implements the operator +.
            </summary>
            <param name="value">The value.</param>
            <returns>
                The result of the operator.
            </returns>
        </member>
        <member name="M:BigMath.Int128.op_UnaryNegation(BigMath.Int128)">
            <summary>
                Implements the operator -.
            </summary>
            <param name="value">The value.</param>
            <returns>
                The result of the operator.
            </returns>
        </member>
        <member name="M:BigMath.Int128.op_Addition(BigMath.Int128,BigMath.Int128)">
            <summary>
                Implements the operator +.
            </summary>
            <param name="left">The x.</param>
            <param name="right">The y.</param>
            <returns>
                The result of the operator.
            </returns>
        </member>
        <member name="M:BigMath.Int128.op_Subtraction(BigMath.Int128,BigMath.Int128)">
            <summary>
                Implements the operator -.
            </summary>
            <param name="left">The x.</param>
            <param name="right">The y.</param>
            <returns>
                The result of the operator.
            </returns>
        </member>
        <member name="M:BigMath.Int128.op_Modulus(BigMath.Int128,BigMath.Int128)">
            <summary>
                Implements the operator %.
            </summary>
            <param name="dividend">The dividend.</param>
            <param name="divisor">The divisor.</param>
            <returns>
                The result of the operator.
            </returns>
        </member>
        <member name="M:BigMath.Int128.op_Division(BigMath.Int128,BigMath.Int128)">
            <summary>
                Implements the operator /.
            </summary>
            <param name="dividend">The dividend.</param>
            <param name="divisor">The divisor.</param>
            <returns>
                The result of the operator.
            </returns>
        </member>
        <member name="M:BigMath.Int128.op_Multiply(BigMath.Int128,BigMath.Int128)">
            <summary>
                Implements the operator *.
            </summary>
            <param name="left">The x.</param>
            <param name="right">The y.</param>
            <returns>
                The result of the operator.
            </returns>
        </member>
        <member name="M:BigMath.Int128.op_RightShift(BigMath.Int128,System.Int32)">
            <summary>
                Implements the operator &gt;&gt;.
            </summary>
            <param name="value">The value.</param>
            <param name="shift">The shift.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:BigMath.Int128.op_LeftShift(BigMath.Int128,System.Int32)">
            <summary>
                Implements the operator &lt;&lt;.
            </summary>
            <param name="value">The value.</param>
            <param name="shift">The shift.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:BigMath.Int128.op_BitwiseOr(BigMath.Int128,BigMath.Int128)">
            <summary>
                Implements the operator |.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:BigMath.Int128.op_BitwiseAnd(BigMath.Int128,BigMath.Int128)">
            <summary>
                Implements the operator &amp;.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:BigMath.Int128.op_OnesComplement(BigMath.Int128)">
            <summary>
                Implements the operator ~.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:BigMath.Int128.op_Increment(BigMath.Int128)">
            <summary>
                Implements the operator ++.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:BigMath.Int128.op_Decrement(BigMath.Int128)">
            <summary>
                Implements the operator --.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the operator.</returns>
        </member>
    </members>
</doc>
