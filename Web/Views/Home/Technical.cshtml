@* Copyright 2024 Murray Grant
    //
    //    Licensed under the Apache License, Version 2.0 (the "License");
    // you may not use this file except in compliance with the License.
    // You may obtain a copy of the License at
    //
    // http://www.apache.org/licenses/LICENSE-2.0
    //
    //    Unless required by applicable law or agreed to in writing, software
    // distributed under the License is distributed on an "AS IS" BASIS,
    // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    // See the License for the specific language governing permissions and
    // limitations under the License.
*@
@{
    ViewData["Title"] = "Technical";
}

<h2>Technical Details</h2>

<p>
    This page lists more technical details of the implementation of the site and exactly how it generates passwords.
</p>


<a name="platform"></a>
<a href="/technical#platform"><h3>What Platform and Environment is the Site Based On?</h3></a>
<p>
    I'm a Windows .NET developer, but <a href="https://docs.microsoft.com/en-us/dotnet/core/">.NET Core</a> has let me host on Linux!
    This lets me save a few dollars on licenses and means I can get away with lower cost hardware.
</p>
<ul>
    <li>Debian Linux (version 12 as of 2022)</li>
    <li>Microsoft .NET Core (version 8 as of 2024)</li>
    <li>Nginx</li>
    <li>ASP.NET Core</li>
    <li>C#</li>
</ul>
<p>
    Previous I was running:
</p>
<ul>
    <li>Windows Server</li>
    <li>Microsoft .NET</li>
    <li>IIS</li>
    <li>ASP.NET MVC</li>
    <li>C#</li>
</ul>


<a name="source"></a>
<a href="/technical#source"><h3>Where Can I Get the Source Code?</h3></a>
<p>
    From <a href="https://github.com/ligos/MakeMeAPassword">GitHub</a>. Under the <a href="http://www.apache.org/licenses/LICENSE-2.0.html">Apache License</a>.
</p>



<a name="build"></a>
<a href="/technical#build"><h3>What Developer Tools do I need to Build the Site?</h3></a>
<p>
    I'm developing using <a href="https://www.visualstudio.com">Visual Studio</a>.
    Dependencies are referenced by nuget or included as binary assets.
    There is no database behind the scenes.
</p>



<a name="random"></a>
<a href="/technical#randomgenerator"><h3>What Random Number Generator are you Using?</h3></a>
<p>
    The fundamental building block of any password generator is a <a href="http://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator">cryptographic random number generator</a>.
    The key requirements of which are:
</p>
<ol>
    <li>You can't determine the next result based on the current one (or after observing many results).</li>
    <li>You can't determine previous results based on the current one (or after observing many results).</li>
</ol>
<p>
    The standard option on Windows .NET is to use <code>RNGCryptoServiceProvider</code>.
    But I don't want to put all my eggs in one basket, so I'm using a random number generator which derives its data from many sources.
    This is called <a href="https://github.com/ligos/terninger">Terninger</a>, which is my own implementation of <a href="https://www.schneier.com/academic/paperfiles/fortuna.pdf">Fortuna</a>, a CRNG designed by <a href="https://www.schneier.com/">Bruce Schneier</a>.
</p>
<p>
    Prior to May 2018, I was using a random number generator of my own design.
    I don't believe this had any serious flaws, but Terninger is of much higher quality.
</p>

<a name="randomtests"></a>
<a href="/technical#randomtests"><h3>What Random Tests Have you Subjected Your RNG to?</h3></a>
<p>
    The core PRNG (AES in counter mode) was put through <a href="https://blog.ligos.net/2017-06-02/Building-A-CRNG-Terninger-4-Random-Tests.html">4 separate random number test suites</a>.
    These were: <a href="http://pracrand.sourceforge.net/">PractRand</a>, <a href="http://cristianopi.altervista.org/RaBiGeTe_MT">RaBiGeTe</a>, <a href="http://simul.iro.umontreal.ca/testu01/tu01.html">TestU01</a> and <a href="http://www.phy.duke.edu/~rgb/General/dieharder.php">Dieharder</a>.
    It even passed them all!
</p>
<p>
    The pooled generator uses the same core PRNG (as specified in Fortuna).
    As long as the pool accumulates entropy and reseeds the internal PRNG (and yes, I've checked it does), the above results apply to every random number used by Make Me a Password.
</p>


<a name="entropy"></a>
<a href="/technical#entropy"><h3>What Sources of Entropy do you use?</h3></a>
<p>
    No matter what randomisation algorithms are used, without a good source of entropy you'll get the same numbers out the other end.
    The following sources are used by Terninger:
</p>

<ul>
    <li>The <a href="https://onerng.info/">OneRNG</a> hardware random number generator</li>
    <li>Current date / time</li>
    <li>High precision CPU timer</li>
    <li>.NET memory stats (from garbage collector)</li>
    <li>Underlying system crypto random number generator (<code>RNGCryptoServiceProvider</code>)</li>
    <li>Statistics against processes running on the system</li>
    <li>Network statistics</li>
    <li>Several external 3rd party sites which claim to produce random numbers</li>
    <li>Network timing pinging various servers around the world</li>
    <li>Content hashes of various news and content sites around the world</li>
    <li>Anonymous web request data (IP address, user agent, etc)</li>
</ul>
<p>
    <a href="https://blog.ligos.net/2018-01-24/Building-A-CRNG-Terninger-8-Entropy-Sources.html">See here for further details of the base sources used</a>.
    Over time, I expect to add other sources, as time allows me to implement them.
</p>


<a name="algorithms"></a>
<a href="/technical#algorithms"><h3>What Algorithms do you use to Generate Passwords?</h3></a>
<p>
    Each algorithm is implemented in MVC controller classes named (for example) <code>ApiPassphraseV1Controller</code>.
    Generally, they are table lookups. Where the table varies from style to style.
    By convention, a method <code>SelectPhrases()</code> / <code>SelectPasswords()</code> / <code>SelectPINs()</code> returns one or more passwords based on the parameters supplied.
</p>
<p>
    More details can be found in the <a href="/api">API documentation</a>.
</p>

<h4>Hex Style</h4>
<p>
    The hex passwords are taken directly from the random number generator without any modification.
    No lookups, tables or hash functions here.
    Just raw, unadulterated bytes.
</p>

<h4>Passphrase Style</h4>
<p>
    Each word is chosen from the dictionary as a giant lookup.
    After the phrase is constructed, it may be rejected if it does not meet the length requirements.
    After 100 attempts without meeting length requirements, a null passphrase will be returned.
</p>

<h4>Pronounceable Style</h4>
<p>
    Uses a lookup into vowel and consonant sounds.
    Some very basic logic is used to alternate between vowels and consonants, but I could do much better cleaning up double letters and so on.
</p>

<h4>Readable Passphrase Style</h4>
<p>
    This calls out to my Readabable Passphrase library.
    <a href="https://github.com/ligos/readablepassphrasegenerator">Source code</a> is available.
    After the phrase is constructed, it may be rejected if it does not meet the length requirements.
    After 100 attempts without meeting length requirements, a null passphrase will be returned.
</p>

<h4>PIN Style</h4>
<p>
    PINs are constructed as a lookup into the digits <code>0..9</code>.
    After a PIN is constructed, it may be rejected if it is on the blacklist.
</p>

<h4>Pattern Style</h4>
<p>
    Patterns use a more complex algorithm.
</p>
<ol>
    <li>A random starting point is chosen on the grid, as the "current" point.</li>
    <li>A random adjacent unused point is chosen. This point is now "current".</li>
    <li>Go to 1 until the required number are selected.</li>
</ol>

<h4>Unicode Style</h4>
<p>
    There are too many code points to do lookups into a full table of known characters.
    So generating Unicode passwords uses a different algorithm.
</p>
<ol>
    <li>A random Int32 is generated to select a candidate code point.</li>
    <li>High bits from the int is masked depending on if only code points from the basic multilingual plane are selected (or not)</li>
    <li>The candidate code point may be rejected if it lies in certain ranges (surrogate points, control codes, etc)</li>
    <li>The candidate code point must be classed as a particular <a href="https://docs.microsoft.com/en-us/dotnet/api/system.globalization.unicodecategory">Unicode category</a> (this is how East Asian characters are excluded)</li>
</ol>
