<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ReadablePassphrase</name>
    </assembly>
    <members>
        <member name="T:MurrayGrant.ReadablePassphrase.Dictionaries.EmptyDictionary">
            <summary>
            A dictionary with never has words in it.
            </summary>
        </member>
        <member name="T:MurrayGrant.ReadablePassphrase.Dictionaries.ExplicitXmlWordDictionary">
            <summary>
            A dictionary is a collection of words categorised by parts of speech. 
            </summary>
        </member>
        <member name="M:MurrayGrant.ReadablePassphrase.Dictionaries.ExplicitXmlDictionaryLoader.LoadFrom">
            <summary>
            Loads the default dictionary.
            </summary>
            <remarks>
            This will attempt to load 'dictionary.xml, .xml.gz and .gz' from
            the folder of the exe (<c>Assembly.GetEntryAssembly()</c>) or the current directory (<c>Environment.CurrentDirectory</c>).
            
            For information about the dictionary schema definition see the default xml file or codeplex website.
            </remarks>
        </member>
        <member name="M:MurrayGrant.ReadablePassphrase.Dictionaries.ExplicitXmlDictionaryLoader.LoadFrom(System.String)">
            <summary>
            Loads a dictionary from the specified path.
            </summary>
            <remarks>
            The file can be plaintext or gzipped.
            
            For information about the dictionary schema definition see the default xml file or codeplex website.
            </remarks>
        </member>
        <member name="M:MurrayGrant.ReadablePassphrase.Dictionaries.ExplicitXmlDictionaryLoader.LoadFrom(System.IO.FileInfo)">
            <summary>
            Loads a dictionary from the specified file.
            </summary>
            <remarks>
            The file can be plaintext or gzipped.
            
            For information about the dictionary schema definition see the default xml file or codeplex website.
            </remarks>
        </member>
        <member name="M:MurrayGrant.ReadablePassphrase.Dictionaries.ExplicitXmlDictionaryLoader.LoadFrom(System.Uri,System.Boolean)">
            <summary>
            Loads a dictionary from the specified url.
            </summary>
            <remarks>
            The file can be plaintext or gzipped. But you must specify which using is <c>isCompressed</c> parameter.
            
            For information about the dictionary schema definition see the default xml file or codeplex website.
            </remarks>
        </member>
        <member name="M:MurrayGrant.ReadablePassphrase.Dictionaries.ExplicitXmlDictionaryLoader.LoadFrom(System.Uri,System.Boolean,System.TimeSpan)">
            <summary>
            Loads a dictionary from the specified url.
            </summary>
            <remarks>
            The file can be plaintext or gzipped. But you must specify which using is <c>isCompressed</c> parameter.
            
            For information about the dictionary schema definition see the default xml file or codeplex website.
            </remarks>
        </member>
        <member name="M:MurrayGrant.ReadablePassphrase.Dictionaries.ExplicitXmlDictionaryLoader.LoadFrom(System.IO.Stream)">
            <summary>
            Loads a dictionary from the specified stream.
            </summary>
            <remarks>
            The file can be plaintext or gzipped.
            The stream must have <c>CanSeek</c> = true.
            
            For information about the dictionary schema definition see the default xml file or codeplex website.
            </remarks>
        </member>
        <member name="M:MurrayGrant.ReadablePassphrase.Dictionaries.ExplicitXmlDictionaryLoader.LoadFrom(System.IO.Stream,System.Boolean)">
            <summary>
            Loads a dictionary from the specified stream.
            </summary>
            <remarks>
            The file can be plaintext or gzipped based on the <c>isCompressed</c> parameter.
            The stream does NOT require <c>CanSeek</c> = true.
            Use this overload for streams which do not support seeking but are compressed (eg: network stream).
            
            For information about the dictionary schema definition see the default xml file or codeplex website.
            </remarks>
        </member>
        <member name="T:MurrayGrant.ReadablePassphrase.PhraseCombinations">
            <summary>
            Represents the number of combinations for a given phrase strength and dictionary.
            </summary>
            <remarks>
            Shortest only includes clauses which are required. It represents the shortest possible phrases (assuming all optional clauses are not chosen).
            Longest includes all optional clauses. It represents combinations for long phrases (assuming all optional clauses are chosen).
            Both allows for all possible clause combinations (optional or otherwise). It represents combinations for short and long phrases together.
            OptionalAverage shows the combinations by using the weightings for optional clauses. It represents the average phrase. It's the least accurate of all the numbers.
            </remarks>
        </member>
        <member name="P:MurrayGrant.ReadablePassphrase.PhraseCombinations.Shortest">
            <summary>
            Only includes clauses which are required; representing the shortest possible phrases.
            </summary>
        </member>
        <member name="P:MurrayGrant.ReadablePassphrase.PhraseCombinations.Longest">
            <summary>
            Incudes the longest phrases and extra combinations for optionality (ie: optional clauses add an extra combination); representing the absolute maximum combinations.
            </summary>
        </member>
        <member name="P:MurrayGrant.ReadablePassphrase.PhraseCombinations.OptionalAverage">
            <summary>
            Attempts to show the weighted average of combinations if optional clauses are excluded; tries to represent a realistic point between Shortest and Both.
            </summary>
        </member>
        <member name="T:MurrayGrant.ReadablePassphrase.PhraseDescription.Clause">
            <summary>
            Each clause is the basic building block of passphrases.
            </summary>
        </member>
        <member name="M:MurrayGrant.ReadablePassphrase.PhraseDescription.Clause.InitialiseRelationships(System.Collections.Generic.IEnumerable{MurrayGrant.ReadablePassphrase.PhraseDescription.Clause})">
            <summary>
            Relates each clause to others in the overall phrase.
            </summary>
        </member>
        <member name="M:MurrayGrant.ReadablePassphrase.PhraseDescription.Clause.AddWordTemplate(MurrayGrant.ReadablePassphrase.Random.RandomSourceBase,MurrayGrant.ReadablePassphrase.Dictionaries.WordDictionary,System.Collections.Generic.IList{MurrayGrant.ReadablePassphrase.WordTemplate.Template})">
            <summary>
            Builds a template of words for this clause. A template has 1:1 correspondance with actual words, but has not yet chosen them from the dictionary.
            </summary>
        </member>
        <member name="M:MurrayGrant.ReadablePassphrase.PhraseDescription.Clause.SecondPassOfWordTemplate(MurrayGrant.ReadablePassphrase.Random.RandomSourceBase,MurrayGrant.ReadablePassphrase.Dictionaries.WordDictionary,System.Collections.Generic.IList{MurrayGrant.ReadablePassphrase.WordTemplate.Template})">
            <summary>
            2nd pass of building a template of words for this clause. 
            </summary>
        </member>
        <member name="M:MurrayGrant.ReadablePassphrase.PhraseDescription.Clause.CountCombinations(MurrayGrant.ReadablePassphrase.Dictionaries.WordDictionary)">
            <summary>
            Counts the total unique combinations possible for this clause based on dictionary word counts and the clause's configuration.
            </summary>
        </member>
        <member name="M:MurrayGrant.ReadablePassphrase.PhraseDescription.Clause.CreatePhraseDescription(MurrayGrant.ReadablePassphrase.PhraseStrength,MurrayGrant.ReadablePassphrase.Random.RandomSourceBase)">
            <summary>
            Returns a phrase description based on the supplied strength, randomly if random strength chosen.
            </summary>
        </member>
        <member name="P:MurrayGrant.ReadablePassphrase.PhraseDescription.Clause.IsPresent">
            <summary>
            True if this clause is present in the final result.
            </summary>
        </member>
        <member name="T:MurrayGrant.ReadablePassphrase.PhraseDescription.AnyWordClause">
            <summary>
            Any word form in the dictionary at all. Used for creating non-grammatical passphrases.
            </summary>
        </member>
        <member name="T:MurrayGrant.ReadablePassphrase.PhraseStrength">
            <summary>
            A list of standard passphrase strengths.
            </summary>
            <remarks>
            See <c>PhraseDescription.Clause</c> for the details of each of these.
            </remarks>
        </member>
        <member name="T:MurrayGrant.ReadablePassphrase.Random.ExternalRandomSource">
            <summary>
            An external random source from any function returning a byte array.
            </summary>
        </member>
        <member name="T:MurrayGrant.ReadablePassphrase.Random.RandomSourceBase">
            <summary>
            An abstract source of random bytes (with various easier to use methods)
            </summary>
        </member>
        <member name="T:MurrayGrant.ReadablePassphrase.Random.CryptoRandomSource">
            <summary>
            The default random source uses the <c>RNGCryptoServiceProvider</c>.
            </summary>
        </member>
        <member name="T:MurrayGrant.ReadablePassphrase.ReadablePassphraseGenerator">
            <summary>
            Passphrase generator.
            </summary>
        </member>
        <member name="M:MurrayGrant.ReadablePassphrase.ReadablePassphraseGenerator.#ctor">
            <summary>
            Initialises the object with the default random source (based on <c>RNGCryptoServiceProvider</c>) and dictionary (internal XML dictionary).
            </summary>
        </member>
        <member name="M:MurrayGrant.ReadablePassphrase.ReadablePassphraseGenerator.#ctor(MurrayGrant.ReadablePassphrase.Random.RandomSourceBase)">
            <summary>
            Initialises the object with the given random source.
            </summary>
        </member>
        <member name="M:MurrayGrant.ReadablePassphrase.ReadablePassphraseGenerator.#ctor(MurrayGrant.ReadablePassphrase.Dictionaries.WordDictionary)">
            <summary>
            Initialises the object with a preloaded dictionary
            </summary>
        </member>
        <member name="M:MurrayGrant.ReadablePassphrase.ReadablePassphraseGenerator.#ctor(MurrayGrant.ReadablePassphrase.Dictionaries.WordDictionary,MurrayGrant.ReadablePassphrase.Random.RandomSourceBase)">
            <summary>
            Initialises the object with a preloaded dictionary and alternate random source.
            </summary>
        </member>
        <member name="M:MurrayGrant.ReadablePassphrase.ReadablePassphraseGenerator.LoadDictionary(MurrayGrant.ReadablePassphrase.Dictionaries.IDictionaryLoader,System.String)">
            <summary>
            Loads a dictionary using the <c>IDictionaryLoader</c> and the given arguments.
            </summary>
            <param name="loader">The IDictionaryLoader to load the dictionary with.</param>
            <param name="arguments">The arguments to pass to the IDictionaryLoader, parsed like a database connection string.</param>
            <remarks>
            The arguments are parsed like a database connection string.
            An array of semicolon separated key value pairs are expected. 
            Whitespace is trimmed. Keys are case-insensitive.
            '=' and ';' are not valid characters. If you need to pass them as arguments, use the <c>IDictionary</c> overload.
            The meaning of arguments is determined by the <c>IDictionaryLoader</c>
            
            Eg: url=http://server.com/file; iscompressed=true; 
            </remarks>
        </member>
        <member name="M:MurrayGrant.ReadablePassphrase.ReadablePassphraseGenerator.LoadDictionary(MurrayGrant.ReadablePassphrase.Dictionaries.IDictionaryLoader,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Loads a dictionary using the <c>IDictionaryLoader</c> and the given arguments.
            </summary>
            <param name="loader">The IDictionaryLoader to load the dictionary with.</param>
            <param name="arguments">The arguments to pass to the IDictionaryLoader.</param>
        </member>
        <member name="M:MurrayGrant.ReadablePassphrase.ReadablePassphraseGenerator.TryLoadDictionary(MurrayGrant.ReadablePassphrase.Dictionaries.IDictionaryLoader,System.String,System.Exception@)">
            <summary>
            Attempts to load a dictionary using the <c>IDictionaryLoader</c> and the given arguments.
            </summary>
            <param name="loader">The IDictionaryLoader to load the dictionary with.</param>
            <param name="arguments">The arguments to pass to the IDictionaryLoader.</param>
            <param name="error">The error which occured while loading the dictionary (if any).</param>
            <returns>True if the dictionary loaded successfully, false otherwise (and sets the <c>error</c> out parameter to the error).</returns>
            <remarks>
            See <c>LoadDictionary</c> for details of how <c>arguments</c> is parsed.
            </remarks>
        </member>
        <member name="M:MurrayGrant.ReadablePassphrase.ReadablePassphraseGenerator.TryLoadDictionary(MurrayGrant.ReadablePassphrase.Dictionaries.IDictionaryLoader,System.Collections.Generic.IDictionary{System.String,System.String},System.Exception@)">
            <summary>
            Attempts to load a dictionary using the <c>IDictionaryLoader</c> and the given arguments.
            </summary>
            <param name="loader">The IDictionaryLoader to load the dictionary with.</param>
            <param name="arguments">The arguments to pass to the IDictionaryLoader.</param>
            <param name="error">The error which occured while loading the dictionary (if any).</param>
            <returns>True if the dictionary loaded successfully, false otherwise (and sets the <c>error</c> out parameter to the error).</returns>
        </member>
        <member name="M:MurrayGrant.ReadablePassphrase.ReadablePassphraseGenerator.CalculateCombinations(MurrayGrant.ReadablePassphrase.PhraseStrength)">
            <summary>
            Calculates the number of possible combinations of phrases based on the current dictionary and given phrase strength.
            </summary>
        </member>
        <member name="M:MurrayGrant.ReadablePassphrase.ReadablePassphraseGenerator.CalculateCombinations(System.Collections.Generic.IEnumerable{MurrayGrant.ReadablePassphrase.PhraseStrength})">
            <summary>
            Calculates the number of possible combinations of phrases based on the current dictionary and randomly choosing between the given phrase strengths.
            </summary>
        </member>
        <member name="M:MurrayGrant.ReadablePassphrase.ReadablePassphraseGenerator.CalculateCombinations(System.Collections.Generic.IEnumerable{MurrayGrant.ReadablePassphrase.PhraseDescription.Clause})">
            <summary>
            Calculates the number of possible combinations of phrases based on the current dictionary and given phrase description.
            </summary>
        </member>
        <member name="M:MurrayGrant.ReadablePassphrase.ReadablePassphraseGenerator.GenerateAsSecure">
            <summary>
            Generates a single phrase as a <c>SecureString</c> based on <c>PasswordStrength.Random</c>.
            This is the slowest and most secure method.
            </summary>
        </member>
        <member name="M:MurrayGrant.ReadablePassphrase.ReadablePassphraseGenerator.GenerateAsSecure(MurrayGrant.ReadablePassphrase.PhraseStrength)">
            <summary>
            Generates a single phrase as a <c>SecureString</c> based on the given phrase strength.
            This is the slowest and most secure method.
            </summary>
        </member>
        <member name="M:MurrayGrant.ReadablePassphrase.ReadablePassphraseGenerator.GenerateAsSecure(System.Collections.Generic.IEnumerable{MurrayGrant.ReadablePassphrase.PhraseStrength})">
            <summary>
            Generates a single phrase as a <c>SecureString</c> based on a randomly selected phrase strength.
            This is the slowest and most secure method.
            </summary>
        </member>
        <member name="M:MurrayGrant.ReadablePassphrase.ReadablePassphraseGenerator.GenerateAsSecure(System.Collections.Generic.IEnumerable{MurrayGrant.ReadablePassphrase.PhraseDescription.Clause})">
            <summary>
            Generates a single phrase as a <c>SecureString</c> based on the given phrase description.
            This is the slowest and most secure method.
            </summary>
        </member>
        <member name="M:MurrayGrant.ReadablePassphrase.ReadablePassphraseGenerator.GenerateAsSecure(MurrayGrant.ReadablePassphrase.PhraseStrength,System.Boolean)">
            <summary>
            Generates a single phrase as a <c>SecureString</c> based on the given phrase strength.
            This is the slowest and most secure method.
            </summary>
            <param name="strength">One of the predefined <c>PhraseStrength</c> enumeration members.</param>
            <param name="includeSpacesBetweenWords">Include spaces between words (defaults to true).</param>
        </member>
        <member name="M:MurrayGrant.ReadablePassphrase.ReadablePassphraseGenerator.GenerateAsSecure(System.Collections.Generic.IEnumerable{MurrayGrant.ReadablePassphrase.PhraseStrength},System.Boolean)">
            <summary>
            Generates a single phrase as a <c>SecureString</c> based on the given phrase strength.
            This is the slowest and most secure method.
            </summary>
            <param name="strengths">A collection of the predefined <c>PhraseStrength</c> enumeration members to choose between at random.</param>
            <param name="includeSpacesBetweenWords">Include spaces between words (defaults to true).</param>
        </member>
        <member name="M:MurrayGrant.ReadablePassphrase.ReadablePassphraseGenerator.GenerateAsSecure(System.Collections.Generic.IEnumerable{MurrayGrant.ReadablePassphrase.PhraseDescription.Clause},System.Boolean)">
            <summary>
            Generates a single phrase as a <c>SecureString</c> based on the given phrase description.
            This is the slowest and most secure method.
            </summary>
            <param name="phraseDescription">One or more <c>Clause</c> objects defineing the details of the phrase.</param>
            <param name="includeSpacesBetweenWords">Include spaces between words (defaults to true).</param>
        </member>
        <member name="M:MurrayGrant.ReadablePassphrase.ReadablePassphraseGenerator.Generate">
            <summary>
            Generates a single phrase based on <c>PasswordStrength.Random</c> in a <c>StringBuilder</c>.
            This is the fastest and least secure method.
            </summary>
        </member>
        <member name="M:MurrayGrant.ReadablePassphrase.ReadablePassphraseGenerator.Generate(MurrayGrant.ReadablePassphrase.PhraseStrength)">
            <summary>
            Generates a single phrase based on the given phrase strength in a <c>StringBuilder</c>.
            This is the fastest and least secure method.
            </summary>
        </member>
        <member name="M:MurrayGrant.ReadablePassphrase.ReadablePassphraseGenerator.Generate(MurrayGrant.ReadablePassphrase.PhraseStrength,System.Boolean)">
            <summary>
            Generates a single phrase based on the given phrase strength in a <c>StringBuilder</c>.
            This is the fastest and least secure method.
            </summary>
            <param name="strength">One of the predefined <c>PhraseStrength</c> enumeration members.</param>
            <param name="includeSpacesBetweenWords">Include spaces between words (defaults to true).</param>
        </member>
        <member name="M:MurrayGrant.ReadablePassphrase.ReadablePassphraseGenerator.Generate(System.Collections.Generic.IEnumerable{MurrayGrant.ReadablePassphrase.PhraseStrength})">
            <summary>
            Generates a single phrase based on a randomly chosen phrase strength in a <c>StringBuilder</c>.
            This is the fastest and least secure method.
            </summary>
            <param name="strengths">A collection of the predefined <c>PhraseStrength</c> enumeration members to choose between at random.</param>
        </member>
        <member name="M:MurrayGrant.ReadablePassphrase.ReadablePassphraseGenerator.Generate(System.Collections.Generic.IEnumerable{MurrayGrant.ReadablePassphrase.PhraseStrength},System.Boolean)">
            <summary>
            Generates a single phrase based on a randomly chosen phrase strength in a <c>StringBuilder</c>.
            This is the fastest and least secure method.
            </summary>
            <param name="strengths">A collection of the predefined <c>PhraseStrength</c> enumeration members to choose between at random.</param>
            <param name="includeSpacesBetweenWords">Include spaces between words (defaults to true).</param>
        </member>
        <member name="M:MurrayGrant.ReadablePassphrase.ReadablePassphraseGenerator.Generate(System.Collections.Generic.IEnumerable{MurrayGrant.ReadablePassphrase.PhraseDescription.Clause})">
            <summary>
            Generates a single phrase based on the given phrase description in a <c>StringBuilder</c>.
            This is the fastest and least secure method.
            </summary>
        </member>
        <member name="M:MurrayGrant.ReadablePassphrase.ReadablePassphraseGenerator.Generate(System.Collections.Generic.IEnumerable{MurrayGrant.ReadablePassphrase.PhraseDescription.Clause},System.Boolean)">
            <summary>
            Generates a single phrase based on the given phrase description in a <c>StringBuilder</c>.
            This is the fastest and least secure method.
            </summary>
            <param name="phraseDescription">One or more <c>Clause</c> objects defineing the details of the phrase.</param>
            <param name="includeSpacesBetweenWords">Include spaces between words (defaults to true).</param>
        </member>
        <member name="M:MurrayGrant.ReadablePassphrase.ReadablePassphraseGenerator.GenerateAsUtf8Bytes">
            <summary>
            Generates a single phrase based on <c>PasswordStrength.Random</c> in a UTF8 <c>byte[]</c>.
            This is slightly slower than <c>Generate()</c> and allows deterministic destruction of the data, but is still unencrypted.
            </summary>
        </member>
        <member name="M:MurrayGrant.ReadablePassphrase.ReadablePassphraseGenerator.GenerateAsUtf8Bytes(MurrayGrant.ReadablePassphrase.PhraseStrength)">
            <summary>
            Generates a single phrase based on the given phrase strength in a UTF8 <c>byte[]</c>.
            This is slightly slower than <c>Generate()</c> and allows deterministic destruction of the data, but is still unencrypted.
            </summary>
        </member>
        <member name="M:MurrayGrant.ReadablePassphrase.ReadablePassphraseGenerator.GenerateAsUtf8Bytes(MurrayGrant.ReadablePassphrase.PhraseStrength,System.Boolean)">
            <summary>
            Generates a single phrase based on the given phrase strength in a UTF8 <c>byte[]</c>.
            This is slightly slower than <c>Generate()</c> and allows deterministic destruction of the data, but is still unencrypted.
            </summary>
            <param name="strength">One of the predefined <c>PhraseStrength</c> enumeration members.</param>
            <param name="includeSpacesBetweenWords">Include spaces between words (defaults to true).</param>
        </member>
        <member name="M:MurrayGrant.ReadablePassphrase.ReadablePassphraseGenerator.GenerateAsUtf8Bytes(System.Collections.Generic.IEnumerable{MurrayGrant.ReadablePassphrase.PhraseStrength})">
            <summary>
            Generates a single phrase based on a randomly selected phrase strength in a UTF8 <c>byte[]</c>.
            This is slightly slower than <c>Generate()</c> and allows deterministic destruction of the data, but is still unencrypted.
            </summary>
            <param name="strengths">A collection of the predefined <c>PhraseStrength</c> enumeration members to choose between at random.</param>
        </member>
        <member name="M:MurrayGrant.ReadablePassphrase.ReadablePassphraseGenerator.GenerateAsUtf8Bytes(System.Collections.Generic.IEnumerable{MurrayGrant.ReadablePassphrase.PhraseStrength},System.Boolean)">
            <summary>
            Generates a single phrase based on a randomly selected phrase strength in a UTF8 <c>byte[]</c>.
            This is slightly slower than <c>Generate()</c> and allows deterministic destruction of the data, but is still unencrypted.
            </summary>
            <param name="strengths">A collection of the predefined <c>PhraseStrength</c> enumeration members to choose between at random.</param>
            <param name="includeSpacesBetweenWords">Include spaces between words (defaults to true).</param>
        </member>
        <member name="M:MurrayGrant.ReadablePassphrase.ReadablePassphraseGenerator.GenerateAsUtf8Bytes(System.Collections.Generic.IEnumerable{MurrayGrant.ReadablePassphrase.PhraseDescription.Clause})">
            <summary>
            Generates a single phrase based on the given phrase description in a UTF8 <c>byte[]</c>.
            This is slightly slower than <c>Generate()</c> and allows deterministic destruction of the data, but is still unencrypted.
            </summary>
        </member>
        <member name="M:MurrayGrant.ReadablePassphrase.ReadablePassphraseGenerator.GenerateAsUtf8Bytes(System.Collections.Generic.IEnumerable{MurrayGrant.ReadablePassphrase.PhraseDescription.Clause},System.Boolean)">
            <summary>
            Generates a single phrase based on the given phrase description in a UTF8 <c>byte[]</c>.
            This is slightly slower than <c>Generate()</c> and allows deterministic destruction of the data, but is still unencrypted.
            </summary>
            <param name="phraseDescription">One or more <c>Clause</c> objects defineing the details of the phrase.</param>
            <param name="includeSpacesBetweenWords">Include spaces between words (defaults to true).</param>
        </member>
        <member name="T:MurrayGrant.ReadablePassphrase.WordTemplate.Template">
            <summary>
            A template word has a 1:1 correspondance with actual dictionary words, where as a <c>Clause</c> does not.
            A <c>Clause</c> produces one or more template words, which then choose their final <c>Word</c> from a dictionary.
            </summary>
        </member>
        <member name="T:MurrayGrant.ReadablePassphrase.WordTemplate.AnyTemplate">
            <summary>
            Template to choose any word form from the dictionary.
            </summary>
        </member>
        <member name="T:MurrayGrant.ReadablePassphrase.WordTemplate.PhraseConjunctionTemplate">
            <summary>
            Phrase conjunctions join different phrases together. Eg: the man hit the ball and got a home run.
            </summary>
        </member>
        <member name="T:MurrayGrant.ReadablePassphrase.WordTemplate.NounConjunctionTemplate">
            <summary>
            Noun conjunctions join noun clauses together. Eg: the bat and the ball.
            </summary>
        </member>
    </members>
</doc>
